//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudyingController.SCS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.TeacherDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.InstituteAdminDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.FacultySecretaryDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.StudentDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.InstituteSecretaryDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.FacultyAdminDTO))]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EntitiesDTO.SystemUserDTO UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EntitiesDTO.SystemUserDTO User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
    [System.SerializableAttribute()]
    public partial class ControllerServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SCS.IControllerService")]
    public interface IControllerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/Login", ReplyAction="http://tempuri.org/IControllerService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/LoginControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        StudyingController.SCS.Session Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/Login", ReplyAction="http://tempuri.org/IControllerService/LoginResponse")]
        System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState);
        
        StudyingController.SCS.Session EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetInstitutes", ReplyAction="http://tempuri.org/IControllerService/GetInstitutesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetInstitutesControllerServiceExceptionFaul" +
            "t", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.InstituteDTO> GetInstitutes(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetInstitutes", ReplyAction="http://tempuri.org/IControllerService/GetInstitutesResponse")]
        System.IAsyncResult BeginGetInstitutes(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.InstituteDTO> EndGetInstitutes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetAllFaculties", ReplyAction="http://tempuri.org/IControllerService/GetAllFacultiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetAllFacultiesControllerServiceExceptionFa" +
            "ult", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetAllFaculties(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetAllFaculties", ReplyAction="http://tempuri.org/IControllerService/GetAllFacultiesResponse")]
        System.IAsyncResult BeginGetAllFaculties(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetAllFaculties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetFaculties", ReplyAction="http://tempuri.org/IControllerService/GetFacultiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetFacultiesControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetFaculties", ReplyAction="http://tempuri.org/IControllerService/GetFacultiesResponse")]
        System.IAsyncResult BeginGetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetFaculties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetAllCathedras", ReplyAction="http://tempuri.org/IControllerService/GetAllCathedrasResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetAllCathedrasControllerServiceExceptionFa" +
            "ult", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetAllCathedras(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetAllCathedras", ReplyAction="http://tempuri.org/IControllerService/GetAllCathedrasResponse")]
        System.IAsyncResult BeginGetAllCathedras(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetAllCathedras(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetCathedras", ReplyAction="http://tempuri.org/IControllerService/GetCathedrasResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetCathedrasControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetCathedras(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetCathedras", ReplyAction="http://tempuri.org/IControllerService/GetCathedrasResponse")]
        System.IAsyncResult BeginGetCathedras(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetCathedras(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetGroups", ReplyAction="http://tempuri.org/IControllerService/GetGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetGroupsControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetGroups(StudyingController.SCS.Session session, int cathedraID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetGroups", ReplyAction="http://tempuri.org/IControllerService/GetGroupsResponse")]
        System.IAsyncResult BeginGetGroups(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveInstitute", ReplyAction="http://tempuri.org/IControllerService/SaveInstituteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveInstituteControllerServiceExceptionFaul" +
            "t", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveInstitute", ReplyAction="http://tempuri.org/IControllerService/SaveInstituteResponse")]
        System.IAsyncResult BeginSaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, System.AsyncCallback callback, object asyncState);
        
        void EndSaveInstitute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveFaculty", ReplyAction="http://tempuri.org/IControllerService/SaveFacultyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveFacultyControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveFaculty", ReplyAction="http://tempuri.org/IControllerService/SaveFacultyResponse")]
        System.IAsyncResult BeginSaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, System.AsyncCallback callback, object asyncState);
        
        void EndSaveFaculty(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveCathedra", ReplyAction="http://tempuri.org/IControllerService/SaveCathedraResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveCathedraControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveCathedra", ReplyAction="http://tempuri.org/IControllerService/SaveCathedraResponse")]
        System.IAsyncResult BeginSaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, System.AsyncCallback callback, object asyncState);
        
        void EndSaveCathedra(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveGroup", ReplyAction="http://tempuri.org/IControllerService/SaveGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveGroupControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveGroup(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveGroup", ReplyAction="http://tempuri.org/IControllerService/SaveGroupResponse")]
        System.IAsyncResult BeginSaveGroup(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group, System.AsyncCallback callback, object asyncState);
        
        void EndSaveGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetUsers", ReplyAction="http://tempuri.org/IControllerService/GetUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetUsersControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> GetUsers(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetUsers", ReplyAction="http://tempuri.org/IControllerService/GetUsersResponse")]
        System.IAsyncResult BeginGetUsers(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> EndGetUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveUser", ReplyAction="http://tempuri.org/IControllerService/SaveUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveUserControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.TeacherDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.InstituteAdminDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.FacultySecretaryDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.StudentDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.InstituteSecretaryDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.FacultyAdminDTO))]
        void SaveUser(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveUser", ReplyAction="http://tempuri.org/IControllerService/SaveUserResponse")]
        System.IAsyncResult BeginSaveUser(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user, System.AsyncCallback callback, object asyncState);
        
        void EndSaveUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetSpecializations", ReplyAction="http://tempuri.org/IControllerService/GetSpecializationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetSpecializationsControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> GetSpecializations(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetSpecializations", ReplyAction="http://tempuri.org/IControllerService/GetSpecializationsResponse")]
        System.IAsyncResult BeginGetSpecializations(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> EndGetSpecializations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteInstitute", ReplyAction="http://tempuri.org/IControllerService/DeleteInstituteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteInstituteControllerServiceExceptionFa" +
            "ult", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteInstitute(StudyingController.SCS.Session session, int instituteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteInstitute", ReplyAction="http://tempuri.org/IControllerService/DeleteInstituteResponse")]
        System.IAsyncResult BeginDeleteInstitute(StudyingController.SCS.Session session, int instituteID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteInstitute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteFaculty", ReplyAction="http://tempuri.org/IControllerService/DeleteFacultyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteFacultyControllerServiceExceptionFaul" +
            "t", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteFaculty(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteFaculty", ReplyAction="http://tempuri.org/IControllerService/DeleteFacultyResponse")]
        System.IAsyncResult BeginDeleteFaculty(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteFaculty(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteCathedra", ReplyAction="http://tempuri.org/IControllerService/DeleteCathedraResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteCathedraControllerServiceExceptionFau" +
            "lt", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteCathedra(StudyingController.SCS.Session session, int cathedraID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteCathedra", ReplyAction="http://tempuri.org/IControllerService/DeleteCathedraResponse")]
        System.IAsyncResult BeginDeleteCathedra(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCathedra(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteGroup", ReplyAction="http://tempuri.org/IControllerService/DeleteGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteGroupControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteGroup(StudyingController.SCS.Session session, int groupID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteGroup", ReplyAction="http://tempuri.org/IControllerService/DeleteGroupResponse")]
        System.IAsyncResult BeginDeleteGroup(StudyingController.SCS.Session session, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteUser", ReplyAction="http://tempuri.org/IControllerService/DeleteUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteUserControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteUser(StudyingController.SCS.Session session, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteUser", ReplyAction="http://tempuri.org/IControllerService/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(StudyingController.SCS.Session session, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetGroupByID", ReplyAction="http://tempuri.org/IControllerService/GetGroupByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetGroupByIDControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        EntitiesDTO.GroupDTO GetGroupByID(StudyingController.SCS.Session session, System.Nullable<int> groupID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetGroupByID", ReplyAction="http://tempuri.org/IControllerService/GetGroupByIDResponse")]
        System.IAsyncResult BeginGetGroupByID(StudyingController.SCS.Session session, System.Nullable<int> groupID, System.AsyncCallback callback, object asyncState);
        
        EntitiesDTO.GroupDTO EndGetGroupByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetSpecializationByID", ReplyAction="http://tempuri.org/IControllerService/GetSpecializationByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetSpecializationByIDControllerServiceExcep" +
            "tionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        EntitiesDTO.SpecializationDTO GetSpecializationByID(StudyingController.SCS.Session session, System.Nullable<int> specializationID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetSpecializationByID", ReplyAction="http://tempuri.org/IControllerService/GetSpecializationByIDResponse")]
        System.IAsyncResult BeginGetSpecializationByID(StudyingController.SCS.Session session, System.Nullable<int> specializationID, System.AsyncCallback callback, object asyncState);
        
        EntitiesDTO.SpecializationDTO EndGetSpecializationByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetLectures", ReplyAction="http://tempuri.org/IControllerService/GetLecturesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetLecturesControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.LectureDTO> GetLectures(StudyingController.SCS.Session session, int teacherID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetLectures", ReplyAction="http://tempuri.org/IControllerService/GetLecturesResponse")]
        System.IAsyncResult BeginGetLectures(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.LectureDTO> EndGetLectures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetLectureGroups", ReplyAction="http://tempuri.org/IControllerService/GetLectureGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetLectureGroupsControllerServiceExceptionF" +
            "ault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetLectureGroups(StudyingController.SCS.Session session, int lectureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetLectureGroups", ReplyAction="http://tempuri.org/IControllerService/GetLectureGroupsResponse")]
        System.IAsyncResult BeginGetLectureGroups(StudyingController.SCS.Session session, int lectureID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetLectureGroups(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControllerServiceChannel : StudyingController.SCS.IControllerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public StudyingController.SCS.Session Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((StudyingController.SCS.Session)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInstitutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInstitutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.InstituteDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllFacultiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllFacultiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.FacultyDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacultiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacultiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.FacultyDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCathedrasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCathedrasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.CathedraDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCathedrasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCathedrasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.CathedraDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.GroupDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.SystemUserDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSpecializationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpecializationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.SpecializationDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EntitiesDTO.GroupDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EntitiesDTO.GroupDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSpecializationByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpecializationByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EntitiesDTO.SpecializationDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EntitiesDTO.SpecializationDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLecturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLecturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.LectureDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLectureGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLectureGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.GroupDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControllerServiceClient : System.ServiceModel.ClientBase<StudyingController.SCS.IControllerService>, StudyingController.SCS.IControllerService {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInstitutesDelegate;
        
        private EndOperationDelegate onEndGetInstitutesDelegate;
        
        private System.Threading.SendOrPostCallback onGetInstitutesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllFacultiesDelegate;
        
        private EndOperationDelegate onEndGetAllFacultiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllFacultiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacultiesDelegate;
        
        private EndOperationDelegate onEndGetFacultiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacultiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCathedrasDelegate;
        
        private EndOperationDelegate onEndGetAllCathedrasDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCathedrasCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCathedrasDelegate;
        
        private EndOperationDelegate onEndGetCathedrasDelegate;
        
        private System.Threading.SendOrPostCallback onGetCathedrasCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupsDelegate;
        
        private EndOperationDelegate onEndGetGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveInstituteDelegate;
        
        private EndOperationDelegate onEndSaveInstituteDelegate;
        
        private System.Threading.SendOrPostCallback onSaveInstituteCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveFacultyDelegate;
        
        private EndOperationDelegate onEndSaveFacultyDelegate;
        
        private System.Threading.SendOrPostCallback onSaveFacultyCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCathedraDelegate;
        
        private EndOperationDelegate onEndSaveCathedraDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCathedraCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveGroupDelegate;
        
        private EndOperationDelegate onEndSaveGroupDelegate;
        
        private System.Threading.SendOrPostCallback onSaveGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUserDelegate;
        
        private EndOperationDelegate onEndSaveUserDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSpecializationsDelegate;
        
        private EndOperationDelegate onEndGetSpecializationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpecializationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteInstituteDelegate;
        
        private EndOperationDelegate onEndDeleteInstituteDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteInstituteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFacultyDelegate;
        
        private EndOperationDelegate onEndDeleteFacultyDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFacultyCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCathedraDelegate;
        
        private EndOperationDelegate onEndDeleteCathedraDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCathedraCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteGroupDelegate;
        
        private EndOperationDelegate onEndDeleteGroupDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupByIDDelegate;
        
        private EndOperationDelegate onEndGetGroupByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSpecializationByIDDelegate;
        
        private EndOperationDelegate onEndGetSpecializationByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpecializationByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLecturesDelegate;
        
        private EndOperationDelegate onEndGetLecturesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLecturesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLectureGroupsDelegate;
        
        private EndOperationDelegate onEndGetLectureGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLectureGroupsCompletedDelegate;
        
        public ControllerServiceClient() {
        }
        
        public ControllerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControllerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetInstitutesCompletedEventArgs> GetInstitutesCompleted;
        
        public event System.EventHandler<GetAllFacultiesCompletedEventArgs> GetAllFacultiesCompleted;
        
        public event System.EventHandler<GetFacultiesCompletedEventArgs> GetFacultiesCompleted;
        
        public event System.EventHandler<GetAllCathedrasCompletedEventArgs> GetAllCathedrasCompleted;
        
        public event System.EventHandler<GetCathedrasCompletedEventArgs> GetCathedrasCompleted;
        
        public event System.EventHandler<GetGroupsCompletedEventArgs> GetGroupsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveInstituteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveFacultyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveCathedraCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveGroupCompleted;
        
        public event System.EventHandler<GetUsersCompletedEventArgs> GetUsersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveUserCompleted;
        
        public event System.EventHandler<GetSpecializationsCompletedEventArgs> GetSpecializationsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteInstituteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFacultyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCathedraCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<GetGroupByIDCompletedEventArgs> GetGroupByIDCompleted;
        
        public event System.EventHandler<GetSpecializationByIDCompletedEventArgs> GetSpecializationByIDCompleted;
        
        public event System.EventHandler<GetLecturesCompletedEventArgs> GetLecturesCompleted;
        
        public event System.EventHandler<GetLectureGroupsCompletedEventArgs> GetLectureGroupsCompleted;
        
        public StudyingController.SCS.Session Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(login, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public StudyingController.SCS.Session EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginLogin(login, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            StudyingController.SCS.Session retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string login, string password) {
            this.LoginAsync(login, password, null);
        }
        
        public void LoginAsync(string login, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        login,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> GetInstitutes(StudyingController.SCS.Session session) {
            return base.Channel.GetInstitutes(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInstitutes(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInstitutes(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> EndGetInstitutes(System.IAsyncResult result) {
            return base.Channel.EndGetInstitutes(result);
        }
        
        private System.IAsyncResult OnBeginGetInstitutes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetInstitutes(session, callback, asyncState);
        }
        
        private object[] OnEndGetInstitutes(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.InstituteDTO> retVal = this.EndGetInstitutes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInstitutesCompleted(object state) {
            if ((this.GetInstitutesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInstitutesCompleted(this, new GetInstitutesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInstitutesAsync(StudyingController.SCS.Session session) {
            this.GetInstitutesAsync(session, null);
        }
        
        public void GetInstitutesAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetInstitutesDelegate == null)) {
                this.onBeginGetInstitutesDelegate = new BeginOperationDelegate(this.OnBeginGetInstitutes);
            }
            if ((this.onEndGetInstitutesDelegate == null)) {
                this.onEndGetInstitutesDelegate = new EndOperationDelegate(this.OnEndGetInstitutes);
            }
            if ((this.onGetInstitutesCompletedDelegate == null)) {
                this.onGetInstitutesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInstitutesCompleted);
            }
            base.InvokeAsync(this.onBeginGetInstitutesDelegate, new object[] {
                        session}, this.onEndGetInstitutesDelegate, this.onGetInstitutesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetAllFaculties(StudyingController.SCS.Session session) {
            return base.Channel.GetAllFaculties(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllFaculties(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllFaculties(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetAllFaculties(System.IAsyncResult result) {
            return base.Channel.EndGetAllFaculties(result);
        }
        
        private System.IAsyncResult OnBeginGetAllFaculties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetAllFaculties(session, callback, asyncState);
        }
        
        private object[] OnEndGetAllFaculties(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.FacultyDTO> retVal = this.EndGetAllFaculties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllFacultiesCompleted(object state) {
            if ((this.GetAllFacultiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllFacultiesCompleted(this, new GetAllFacultiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllFacultiesAsync(StudyingController.SCS.Session session) {
            this.GetAllFacultiesAsync(session, null);
        }
        
        public void GetAllFacultiesAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetAllFacultiesDelegate == null)) {
                this.onBeginGetAllFacultiesDelegate = new BeginOperationDelegate(this.OnBeginGetAllFaculties);
            }
            if ((this.onEndGetAllFacultiesDelegate == null)) {
                this.onEndGetAllFacultiesDelegate = new EndOperationDelegate(this.OnEndGetAllFaculties);
            }
            if ((this.onGetAllFacultiesCompletedDelegate == null)) {
                this.onGetAllFacultiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllFacultiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllFacultiesDelegate, new object[] {
                        session}, this.onEndGetAllFacultiesDelegate, this.onGetAllFacultiesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID) {
            return base.Channel.GetFaculties(session, instituteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFaculties(session, instituteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetFaculties(System.IAsyncResult result) {
            return base.Channel.EndGetFaculties(result);
        }
        
        private System.IAsyncResult OnBeginGetFaculties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            System.Nullable<int> instituteID = ((System.Nullable<int>)(inValues[1]));
            return this.BeginGetFaculties(session, instituteID, callback, asyncState);
        }
        
        private object[] OnEndGetFaculties(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.FacultyDTO> retVal = this.EndGetFaculties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacultiesCompleted(object state) {
            if ((this.GetFacultiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacultiesCompleted(this, new GetFacultiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacultiesAsync(StudyingController.SCS.Session session, System.Nullable<int> instituteID) {
            this.GetFacultiesAsync(session, instituteID, null);
        }
        
        public void GetFacultiesAsync(StudyingController.SCS.Session session, System.Nullable<int> instituteID, object userState) {
            if ((this.onBeginGetFacultiesDelegate == null)) {
                this.onBeginGetFacultiesDelegate = new BeginOperationDelegate(this.OnBeginGetFaculties);
            }
            if ((this.onEndGetFacultiesDelegate == null)) {
                this.onEndGetFacultiesDelegate = new EndOperationDelegate(this.OnEndGetFaculties);
            }
            if ((this.onGetFacultiesCompletedDelegate == null)) {
                this.onGetFacultiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacultiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacultiesDelegate, new object[] {
                        session,
                        instituteID}, this.onEndGetFacultiesDelegate, this.onGetFacultiesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetAllCathedras(StudyingController.SCS.Session session) {
            return base.Channel.GetAllCathedras(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllCathedras(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCathedras(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetAllCathedras(System.IAsyncResult result) {
            return base.Channel.EndGetAllCathedras(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCathedras(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetAllCathedras(session, callback, asyncState);
        }
        
        private object[] OnEndGetAllCathedras(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.CathedraDTO> retVal = this.EndGetAllCathedras(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCathedrasCompleted(object state) {
            if ((this.GetAllCathedrasCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCathedrasCompleted(this, new GetAllCathedrasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCathedrasAsync(StudyingController.SCS.Session session) {
            this.GetAllCathedrasAsync(session, null);
        }
        
        public void GetAllCathedrasAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetAllCathedrasDelegate == null)) {
                this.onBeginGetAllCathedrasDelegate = new BeginOperationDelegate(this.OnBeginGetAllCathedras);
            }
            if ((this.onEndGetAllCathedrasDelegate == null)) {
                this.onEndGetAllCathedrasDelegate = new EndOperationDelegate(this.OnEndGetAllCathedras);
            }
            if ((this.onGetAllCathedrasCompletedDelegate == null)) {
                this.onGetAllCathedrasCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCathedrasCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCathedrasDelegate, new object[] {
                        session}, this.onEndGetAllCathedrasDelegate, this.onGetAllCathedrasCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetCathedras(StudyingController.SCS.Session session, int facultyID) {
            return base.Channel.GetCathedras(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCathedras(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCathedras(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetCathedras(System.IAsyncResult result) {
            return base.Channel.EndGetCathedras(result);
        }
        
        private System.IAsyncResult OnBeginGetCathedras(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginGetCathedras(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndGetCathedras(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.CathedraDTO> retVal = this.EndGetCathedras(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCathedrasCompleted(object state) {
            if ((this.GetCathedrasCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCathedrasCompleted(this, new GetCathedrasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCathedrasAsync(StudyingController.SCS.Session session, int facultyID) {
            this.GetCathedrasAsync(session, facultyID, null);
        }
        
        public void GetCathedrasAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginGetCathedrasDelegate == null)) {
                this.onBeginGetCathedrasDelegate = new BeginOperationDelegate(this.OnBeginGetCathedras);
            }
            if ((this.onEndGetCathedrasDelegate == null)) {
                this.onEndGetCathedrasDelegate = new EndOperationDelegate(this.OnEndGetCathedras);
            }
            if ((this.onGetCathedrasCompletedDelegate == null)) {
                this.onGetCathedrasCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCathedrasCompleted);
            }
            base.InvokeAsync(this.onBeginGetCathedrasDelegate, new object[] {
                        session,
                        facultyID}, this.onEndGetCathedrasDelegate, this.onGetCathedrasCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetGroups(StudyingController.SCS.Session session, int cathedraID) {
            return base.Channel.GetGroups(session, cathedraID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroups(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroups(session, cathedraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetGroups(System.IAsyncResult result) {
            return base.Channel.EndGetGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int cathedraID = ((int)(inValues[1]));
            return this.BeginGetGroups(session, cathedraID, callback, asyncState);
        }
        
        private object[] OnEndGetGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.GroupDTO> retVal = this.EndGetGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupsCompleted(object state) {
            if ((this.GetGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupsCompleted(this, new GetGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupsAsync(StudyingController.SCS.Session session, int cathedraID) {
            this.GetGroupsAsync(session, cathedraID, null);
        }
        
        public void GetGroupsAsync(StudyingController.SCS.Session session, int cathedraID, object userState) {
            if ((this.onBeginGetGroupsDelegate == null)) {
                this.onBeginGetGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetGroups);
            }
            if ((this.onEndGetGroupsDelegate == null)) {
                this.onEndGetGroupsDelegate = new EndOperationDelegate(this.OnEndGetGroups);
            }
            if ((this.onGetGroupsCompletedDelegate == null)) {
                this.onGetGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupsDelegate, new object[] {
                        session,
                        cathedraID}, this.onEndGetGroupsDelegate, this.onGetGroupsCompletedDelegate, userState);
        }
        
        public void SaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute) {
            base.Channel.SaveInstitute(session, institute);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveInstitute(session, institute, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveInstitute(System.IAsyncResult result) {
            base.Channel.EndSaveInstitute(result);
        }
        
        private System.IAsyncResult OnBeginSaveInstitute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.InstituteDTO institute = ((EntitiesDTO.InstituteDTO)(inValues[1]));
            return this.BeginSaveInstitute(session, institute, callback, asyncState);
        }
        
        private object[] OnEndSaveInstitute(System.IAsyncResult result) {
            this.EndSaveInstitute(result);
            return null;
        }
        
        private void OnSaveInstituteCompleted(object state) {
            if ((this.SaveInstituteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveInstituteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveInstituteAsync(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute) {
            this.SaveInstituteAsync(session, institute, null);
        }
        
        public void SaveInstituteAsync(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, object userState) {
            if ((this.onBeginSaveInstituteDelegate == null)) {
                this.onBeginSaveInstituteDelegate = new BeginOperationDelegate(this.OnBeginSaveInstitute);
            }
            if ((this.onEndSaveInstituteDelegate == null)) {
                this.onEndSaveInstituteDelegate = new EndOperationDelegate(this.OnEndSaveInstitute);
            }
            if ((this.onSaveInstituteCompletedDelegate == null)) {
                this.onSaveInstituteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveInstituteCompleted);
            }
            base.InvokeAsync(this.onBeginSaveInstituteDelegate, new object[] {
                        session,
                        institute}, this.onEndSaveInstituteDelegate, this.onSaveInstituteCompletedDelegate, userState);
        }
        
        public void SaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty) {
            base.Channel.SaveFaculty(session, faculty);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveFaculty(session, faculty, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveFaculty(System.IAsyncResult result) {
            base.Channel.EndSaveFaculty(result);
        }
        
        private System.IAsyncResult OnBeginSaveFaculty(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.FacultyDTO faculty = ((EntitiesDTO.FacultyDTO)(inValues[1]));
            return this.BeginSaveFaculty(session, faculty, callback, asyncState);
        }
        
        private object[] OnEndSaveFaculty(System.IAsyncResult result) {
            this.EndSaveFaculty(result);
            return null;
        }
        
        private void OnSaveFacultyCompleted(object state) {
            if ((this.SaveFacultyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveFacultyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveFacultyAsync(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty) {
            this.SaveFacultyAsync(session, faculty, null);
        }
        
        public void SaveFacultyAsync(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, object userState) {
            if ((this.onBeginSaveFacultyDelegate == null)) {
                this.onBeginSaveFacultyDelegate = new BeginOperationDelegate(this.OnBeginSaveFaculty);
            }
            if ((this.onEndSaveFacultyDelegate == null)) {
                this.onEndSaveFacultyDelegate = new EndOperationDelegate(this.OnEndSaveFaculty);
            }
            if ((this.onSaveFacultyCompletedDelegate == null)) {
                this.onSaveFacultyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveFacultyCompleted);
            }
            base.InvokeAsync(this.onBeginSaveFacultyDelegate, new object[] {
                        session,
                        faculty}, this.onEndSaveFacultyDelegate, this.onSaveFacultyCompletedDelegate, userState);
        }
        
        public void SaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra) {
            base.Channel.SaveCathedra(session, cathedra);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCathedra(session, cathedra, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveCathedra(System.IAsyncResult result) {
            base.Channel.EndSaveCathedra(result);
        }
        
        private System.IAsyncResult OnBeginSaveCathedra(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.CathedraDTO cathedra = ((EntitiesDTO.CathedraDTO)(inValues[1]));
            return this.BeginSaveCathedra(session, cathedra, callback, asyncState);
        }
        
        private object[] OnEndSaveCathedra(System.IAsyncResult result) {
            this.EndSaveCathedra(result);
            return null;
        }
        
        private void OnSaveCathedraCompleted(object state) {
            if ((this.SaveCathedraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCathedraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCathedraAsync(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra) {
            this.SaveCathedraAsync(session, cathedra, null);
        }
        
        public void SaveCathedraAsync(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, object userState) {
            if ((this.onBeginSaveCathedraDelegate == null)) {
                this.onBeginSaveCathedraDelegate = new BeginOperationDelegate(this.OnBeginSaveCathedra);
            }
            if ((this.onEndSaveCathedraDelegate == null)) {
                this.onEndSaveCathedraDelegate = new EndOperationDelegate(this.OnEndSaveCathedra);
            }
            if ((this.onSaveCathedraCompletedDelegate == null)) {
                this.onSaveCathedraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCathedraCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCathedraDelegate, new object[] {
                        session,
                        cathedra}, this.onEndSaveCathedraDelegate, this.onSaveCathedraCompletedDelegate, userState);
        }
        
        public void SaveGroup(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group) {
            base.Channel.SaveGroup(session, group);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveGroup(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveGroup(session, group, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveGroup(System.IAsyncResult result) {
            base.Channel.EndSaveGroup(result);
        }
        
        private System.IAsyncResult OnBeginSaveGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.GroupDTO group = ((EntitiesDTO.GroupDTO)(inValues[1]));
            return this.BeginSaveGroup(session, group, callback, asyncState);
        }
        
        private object[] OnEndSaveGroup(System.IAsyncResult result) {
            this.EndSaveGroup(result);
            return null;
        }
        
        private void OnSaveGroupCompleted(object state) {
            if ((this.SaveGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveGroupAsync(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group) {
            this.SaveGroupAsync(session, group, null);
        }
        
        public void SaveGroupAsync(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group, object userState) {
            if ((this.onBeginSaveGroupDelegate == null)) {
                this.onBeginSaveGroupDelegate = new BeginOperationDelegate(this.OnBeginSaveGroup);
            }
            if ((this.onEndSaveGroupDelegate == null)) {
                this.onEndSaveGroupDelegate = new EndOperationDelegate(this.OnEndSaveGroup);
            }
            if ((this.onSaveGroupCompletedDelegate == null)) {
                this.onSaveGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveGroupCompleted);
            }
            base.InvokeAsync(this.onBeginSaveGroupDelegate, new object[] {
                        session,
                        group}, this.onEndSaveGroupDelegate, this.onSaveGroupCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> GetUsers(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles) {
            return base.Channel.GetUsers(session, roles);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUsers(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(session, roles, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> EndGetUsers(System.IAsyncResult result) {
            return base.Channel.EndGetUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.UserRoles roles = ((EntitiesDTO.UserRoles)(inValues[1]));
            return this.BeginGetUsers(session, roles, callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> retVal = this.EndGetUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles) {
            this.GetUsersAsync(session, roles, null);
        }
        
        public void GetUsersAsync(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles, object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, new object[] {
                        session,
                        roles}, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        public void SaveUser(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user) {
            base.Channel.SaveUser(session, user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveUser(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUser(session, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveUser(System.IAsyncResult result) {
            base.Channel.EndSaveUser(result);
        }
        
        private System.IAsyncResult OnBeginSaveUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.SystemUserDTO user = ((EntitiesDTO.SystemUserDTO)(inValues[1]));
            return this.BeginSaveUser(session, user, callback, asyncState);
        }
        
        private object[] OnEndSaveUser(System.IAsyncResult result) {
            this.EndSaveUser(result);
            return null;
        }
        
        private void OnSaveUserCompleted(object state) {
            if ((this.SaveUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUserAsync(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user) {
            this.SaveUserAsync(session, user, null);
        }
        
        public void SaveUserAsync(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user, object userState) {
            if ((this.onBeginSaveUserDelegate == null)) {
                this.onBeginSaveUserDelegate = new BeginOperationDelegate(this.OnBeginSaveUser);
            }
            if ((this.onEndSaveUserDelegate == null)) {
                this.onEndSaveUserDelegate = new EndOperationDelegate(this.OnEndSaveUser);
            }
            if ((this.onSaveUserCompletedDelegate == null)) {
                this.onSaveUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUserCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUserDelegate, new object[] {
                        session,
                        user}, this.onEndSaveUserDelegate, this.onSaveUserCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> GetSpecializations(StudyingController.SCS.Session session, int facultyID) {
            return base.Channel.GetSpecializations(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSpecializations(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpecializations(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> EndGetSpecializations(System.IAsyncResult result) {
            return base.Channel.EndGetSpecializations(result);
        }
        
        private System.IAsyncResult OnBeginGetSpecializations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginGetSpecializations(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndGetSpecializations(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> retVal = this.EndGetSpecializations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpecializationsCompleted(object state) {
            if ((this.GetSpecializationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpecializationsCompleted(this, new GetSpecializationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpecializationsAsync(StudyingController.SCS.Session session, int facultyID) {
            this.GetSpecializationsAsync(session, facultyID, null);
        }
        
        public void GetSpecializationsAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginGetSpecializationsDelegate == null)) {
                this.onBeginGetSpecializationsDelegate = new BeginOperationDelegate(this.OnBeginGetSpecializations);
            }
            if ((this.onEndGetSpecializationsDelegate == null)) {
                this.onEndGetSpecializationsDelegate = new EndOperationDelegate(this.OnEndGetSpecializations);
            }
            if ((this.onGetSpecializationsCompletedDelegate == null)) {
                this.onGetSpecializationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpecializationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpecializationsDelegate, new object[] {
                        session,
                        facultyID}, this.onEndGetSpecializationsDelegate, this.onGetSpecializationsCompletedDelegate, userState);
        }
        
        public void DeleteInstitute(StudyingController.SCS.Session session, int instituteID) {
            base.Channel.DeleteInstitute(session, instituteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteInstitute(StudyingController.SCS.Session session, int instituteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteInstitute(session, instituteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteInstitute(System.IAsyncResult result) {
            base.Channel.EndDeleteInstitute(result);
        }
        
        private System.IAsyncResult OnBeginDeleteInstitute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int instituteID = ((int)(inValues[1]));
            return this.BeginDeleteInstitute(session, instituteID, callback, asyncState);
        }
        
        private object[] OnEndDeleteInstitute(System.IAsyncResult result) {
            this.EndDeleteInstitute(result);
            return null;
        }
        
        private void OnDeleteInstituteCompleted(object state) {
            if ((this.DeleteInstituteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteInstituteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteInstituteAsync(StudyingController.SCS.Session session, int instituteID) {
            this.DeleteInstituteAsync(session, instituteID, null);
        }
        
        public void DeleteInstituteAsync(StudyingController.SCS.Session session, int instituteID, object userState) {
            if ((this.onBeginDeleteInstituteDelegate == null)) {
                this.onBeginDeleteInstituteDelegate = new BeginOperationDelegate(this.OnBeginDeleteInstitute);
            }
            if ((this.onEndDeleteInstituteDelegate == null)) {
                this.onEndDeleteInstituteDelegate = new EndOperationDelegate(this.OnEndDeleteInstitute);
            }
            if ((this.onDeleteInstituteCompletedDelegate == null)) {
                this.onDeleteInstituteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteInstituteCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteInstituteDelegate, new object[] {
                        session,
                        instituteID}, this.onEndDeleteInstituteDelegate, this.onDeleteInstituteCompletedDelegate, userState);
        }
        
        public void DeleteFaculty(StudyingController.SCS.Session session, int facultyID) {
            base.Channel.DeleteFaculty(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteFaculty(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFaculty(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteFaculty(System.IAsyncResult result) {
            base.Channel.EndDeleteFaculty(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFaculty(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginDeleteFaculty(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndDeleteFaculty(System.IAsyncResult result) {
            this.EndDeleteFaculty(result);
            return null;
        }
        
        private void OnDeleteFacultyCompleted(object state) {
            if ((this.DeleteFacultyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFacultyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFacultyAsync(StudyingController.SCS.Session session, int facultyID) {
            this.DeleteFacultyAsync(session, facultyID, null);
        }
        
        public void DeleteFacultyAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginDeleteFacultyDelegate == null)) {
                this.onBeginDeleteFacultyDelegate = new BeginOperationDelegate(this.OnBeginDeleteFaculty);
            }
            if ((this.onEndDeleteFacultyDelegate == null)) {
                this.onEndDeleteFacultyDelegate = new EndOperationDelegate(this.OnEndDeleteFaculty);
            }
            if ((this.onDeleteFacultyCompletedDelegate == null)) {
                this.onDeleteFacultyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFacultyCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFacultyDelegate, new object[] {
                        session,
                        facultyID}, this.onEndDeleteFacultyDelegate, this.onDeleteFacultyCompletedDelegate, userState);
        }
        
        public void DeleteCathedra(StudyingController.SCS.Session session, int cathedraID) {
            base.Channel.DeleteCathedra(session, cathedraID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteCathedra(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCathedra(session, cathedraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteCathedra(System.IAsyncResult result) {
            base.Channel.EndDeleteCathedra(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCathedra(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int cathedraID = ((int)(inValues[1]));
            return this.BeginDeleteCathedra(session, cathedraID, callback, asyncState);
        }
        
        private object[] OnEndDeleteCathedra(System.IAsyncResult result) {
            this.EndDeleteCathedra(result);
            return null;
        }
        
        private void OnDeleteCathedraCompleted(object state) {
            if ((this.DeleteCathedraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCathedraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCathedraAsync(StudyingController.SCS.Session session, int cathedraID) {
            this.DeleteCathedraAsync(session, cathedraID, null);
        }
        
        public void DeleteCathedraAsync(StudyingController.SCS.Session session, int cathedraID, object userState) {
            if ((this.onBeginDeleteCathedraDelegate == null)) {
                this.onBeginDeleteCathedraDelegate = new BeginOperationDelegate(this.OnBeginDeleteCathedra);
            }
            if ((this.onEndDeleteCathedraDelegate == null)) {
                this.onEndDeleteCathedraDelegate = new EndOperationDelegate(this.OnEndDeleteCathedra);
            }
            if ((this.onDeleteCathedraCompletedDelegate == null)) {
                this.onDeleteCathedraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCathedraCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCathedraDelegate, new object[] {
                        session,
                        cathedraID}, this.onEndDeleteCathedraDelegate, this.onDeleteCathedraCompletedDelegate, userState);
        }
        
        public void DeleteGroup(StudyingController.SCS.Session session, int groupID) {
            base.Channel.DeleteGroup(session, groupID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteGroup(StudyingController.SCS.Session session, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteGroup(session, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteGroup(System.IAsyncResult result) {
            base.Channel.EndDeleteGroup(result);
        }
        
        private System.IAsyncResult OnBeginDeleteGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return this.BeginDeleteGroup(session, groupID, callback, asyncState);
        }
        
        private object[] OnEndDeleteGroup(System.IAsyncResult result) {
            this.EndDeleteGroup(result);
            return null;
        }
        
        private void OnDeleteGroupCompleted(object state) {
            if ((this.DeleteGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteGroupAsync(StudyingController.SCS.Session session, int groupID) {
            this.DeleteGroupAsync(session, groupID, null);
        }
        
        public void DeleteGroupAsync(StudyingController.SCS.Session session, int groupID, object userState) {
            if ((this.onBeginDeleteGroupDelegate == null)) {
                this.onBeginDeleteGroupDelegate = new BeginOperationDelegate(this.OnBeginDeleteGroup);
            }
            if ((this.onEndDeleteGroupDelegate == null)) {
                this.onEndDeleteGroupDelegate = new EndOperationDelegate(this.OnEndDeleteGroup);
            }
            if ((this.onDeleteGroupCompletedDelegate == null)) {
                this.onDeleteGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteGroupCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteGroupDelegate, new object[] {
                        session,
                        groupID}, this.onEndDeleteGroupDelegate, this.onDeleteGroupCompletedDelegate, userState);
        }
        
        public void DeleteUser(StudyingController.SCS.Session session, int userID) {
            base.Channel.DeleteUser(session, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteUser(StudyingController.SCS.Session session, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(session, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteUser(System.IAsyncResult result) {
            base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginDeleteUser(session, userID, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            this.EndDeleteUser(result);
            return null;
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(StudyingController.SCS.Session session, int userID) {
            this.DeleteUserAsync(session, userID, null);
        }
        
        public void DeleteUserAsync(StudyingController.SCS.Session session, int userID, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        session,
                        userID}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        public EntitiesDTO.GroupDTO GetGroupByID(StudyingController.SCS.Session session, System.Nullable<int> groupID) {
            return base.Channel.GetGroupByID(session, groupID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupByID(StudyingController.SCS.Session session, System.Nullable<int> groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupByID(session, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EntitiesDTO.GroupDTO EndGetGroupByID(System.IAsyncResult result) {
            return base.Channel.EndGetGroupByID(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            System.Nullable<int> groupID = ((System.Nullable<int>)(inValues[1]));
            return this.BeginGetGroupByID(session, groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupByID(System.IAsyncResult result) {
            EntitiesDTO.GroupDTO retVal = this.EndGetGroupByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupByIDCompleted(object state) {
            if ((this.GetGroupByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupByIDCompleted(this, new GetGroupByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> groupID) {
            this.GetGroupByIDAsync(session, groupID, null);
        }
        
        public void GetGroupByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> groupID, object userState) {
            if ((this.onBeginGetGroupByIDDelegate == null)) {
                this.onBeginGetGroupByIDDelegate = new BeginOperationDelegate(this.OnBeginGetGroupByID);
            }
            if ((this.onEndGetGroupByIDDelegate == null)) {
                this.onEndGetGroupByIDDelegate = new EndOperationDelegate(this.OnEndGetGroupByID);
            }
            if ((this.onGetGroupByIDCompletedDelegate == null)) {
                this.onGetGroupByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupByIDDelegate, new object[] {
                        session,
                        groupID}, this.onEndGetGroupByIDDelegate, this.onGetGroupByIDCompletedDelegate, userState);
        }
        
        public EntitiesDTO.SpecializationDTO GetSpecializationByID(StudyingController.SCS.Session session, System.Nullable<int> specializationID) {
            return base.Channel.GetSpecializationByID(session, specializationID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSpecializationByID(StudyingController.SCS.Session session, System.Nullable<int> specializationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpecializationByID(session, specializationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EntitiesDTO.SpecializationDTO EndGetSpecializationByID(System.IAsyncResult result) {
            return base.Channel.EndGetSpecializationByID(result);
        }
        
        private System.IAsyncResult OnBeginGetSpecializationByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            System.Nullable<int> specializationID = ((System.Nullable<int>)(inValues[1]));
            return this.BeginGetSpecializationByID(session, specializationID, callback, asyncState);
        }
        
        private object[] OnEndGetSpecializationByID(System.IAsyncResult result) {
            EntitiesDTO.SpecializationDTO retVal = this.EndGetSpecializationByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpecializationByIDCompleted(object state) {
            if ((this.GetSpecializationByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpecializationByIDCompleted(this, new GetSpecializationByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpecializationByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> specializationID) {
            this.GetSpecializationByIDAsync(session, specializationID, null);
        }
        
        public void GetSpecializationByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> specializationID, object userState) {
            if ((this.onBeginGetSpecializationByIDDelegate == null)) {
                this.onBeginGetSpecializationByIDDelegate = new BeginOperationDelegate(this.OnBeginGetSpecializationByID);
            }
            if ((this.onEndGetSpecializationByIDDelegate == null)) {
                this.onEndGetSpecializationByIDDelegate = new EndOperationDelegate(this.OnEndGetSpecializationByID);
            }
            if ((this.onGetSpecializationByIDCompletedDelegate == null)) {
                this.onGetSpecializationByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpecializationByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpecializationByIDDelegate, new object[] {
                        session,
                        specializationID}, this.onEndGetSpecializationByIDDelegate, this.onGetSpecializationByIDCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> GetLectures(StudyingController.SCS.Session session, int teacherID) {
            return base.Channel.GetLectures(session, teacherID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLectures(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLectures(session, teacherID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> EndGetLectures(System.IAsyncResult result) {
            return base.Channel.EndGetLectures(result);
        }
        
        private System.IAsyncResult OnBeginGetLectures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int teacherID = ((int)(inValues[1]));
            return this.BeginGetLectures(session, teacherID, callback, asyncState);
        }
        
        private object[] OnEndGetLectures(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.LectureDTO> retVal = this.EndGetLectures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLecturesCompleted(object state) {
            if ((this.GetLecturesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLecturesCompleted(this, new GetLecturesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLecturesAsync(StudyingController.SCS.Session session, int teacherID) {
            this.GetLecturesAsync(session, teacherID, null);
        }
        
        public void GetLecturesAsync(StudyingController.SCS.Session session, int teacherID, object userState) {
            if ((this.onBeginGetLecturesDelegate == null)) {
                this.onBeginGetLecturesDelegate = new BeginOperationDelegate(this.OnBeginGetLectures);
            }
            if ((this.onEndGetLecturesDelegate == null)) {
                this.onEndGetLecturesDelegate = new EndOperationDelegate(this.OnEndGetLectures);
            }
            if ((this.onGetLecturesCompletedDelegate == null)) {
                this.onGetLecturesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLecturesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLecturesDelegate, new object[] {
                        session,
                        teacherID}, this.onEndGetLecturesDelegate, this.onGetLecturesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetLectureGroups(StudyingController.SCS.Session session, int lectureID) {
            return base.Channel.GetLectureGroups(session, lectureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLectureGroups(StudyingController.SCS.Session session, int lectureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLectureGroups(session, lectureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetLectureGroups(System.IAsyncResult result) {
            return base.Channel.EndGetLectureGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetLectureGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int lectureID = ((int)(inValues[1]));
            return this.BeginGetLectureGroups(session, lectureID, callback, asyncState);
        }
        
        private object[] OnEndGetLectureGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.GroupDTO> retVal = this.EndGetLectureGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLectureGroupsCompleted(object state) {
            if ((this.GetLectureGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLectureGroupsCompleted(this, new GetLectureGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLectureGroupsAsync(StudyingController.SCS.Session session, int lectureID) {
            this.GetLectureGroupsAsync(session, lectureID, null);
        }
        
        public void GetLectureGroupsAsync(StudyingController.SCS.Session session, int lectureID, object userState) {
            if ((this.onBeginGetLectureGroupsDelegate == null)) {
                this.onBeginGetLectureGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetLectureGroups);
            }
            if ((this.onEndGetLectureGroupsDelegate == null)) {
                this.onEndGetLectureGroupsDelegate = new EndOperationDelegate(this.OnEndGetLectureGroups);
            }
            if ((this.onGetLectureGroupsCompletedDelegate == null)) {
                this.onGetLectureGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLectureGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLectureGroupsDelegate, new object[] {
                        session,
                        lectureID}, this.onEndGetLectureGroupsDelegate, this.onGetLectureGroupsCompletedDelegate, userState);
        }
    }
}
