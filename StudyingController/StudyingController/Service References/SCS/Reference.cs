//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudyingController.SCS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
    [System.SerializableAttribute()]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EntitiesDTO.SystemUserDTO UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EntitiesDTO.SystemUserDTO User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
    [System.SerializableAttribute()]
    public partial class ControllerServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SCS.IControllerService")]
    public interface IControllerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/Login", ReplyAction="http://tempuri.org/IControllerService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/LoginControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        StudyingController.SCS.Session Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/Login", ReplyAction="http://tempuri.org/IControllerService/LoginResponse")]
        System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState);
        
        StudyingController.SCS.Session EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetInstitutes", ReplyAction="http://tempuri.org/IControllerService/GetInstitutesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetInstitutesControllerServiceExceptionFaul" +
            "t", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.InstituteDTO> GetInstitutes(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetInstitutes", ReplyAction="http://tempuri.org/IControllerService/GetInstitutesResponse")]
        System.IAsyncResult BeginGetInstitutes(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.InstituteDTO> EndGetInstitutes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetFaculties", ReplyAction="http://tempuri.org/IControllerService/GetFacultiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetFacultiesControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetFaculties", ReplyAction="http://tempuri.org/IControllerService/GetFacultiesResponse")]
        System.IAsyncResult BeginGetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetFaculties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetCathedras", ReplyAction="http://tempuri.org/IControllerService/GetCathedrasResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetCathedrasControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetCathedras(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetCathedras", ReplyAction="http://tempuri.org/IControllerService/GetCathedrasResponse")]
        System.IAsyncResult BeginGetCathedras(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetCathedras(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveInstitute", ReplyAction="http://tempuri.org/IControllerService/SaveInstituteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveInstituteControllerServiceExceptionFaul" +
            "t", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveInstitute", ReplyAction="http://tempuri.org/IControllerService/SaveInstituteResponse")]
        System.IAsyncResult BeginSaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, System.AsyncCallback callback, object asyncState);
        
        void EndSaveInstitute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveFaculty", ReplyAction="http://tempuri.org/IControllerService/SaveFacultyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveFacultyControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveFaculty", ReplyAction="http://tempuri.org/IControllerService/SaveFacultyResponse")]
        System.IAsyncResult BeginSaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, System.AsyncCallback callback, object asyncState);
        
        void EndSaveFaculty(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveCathedra", ReplyAction="http://tempuri.org/IControllerService/SaveCathedraResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveCathedraControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveCathedra", ReplyAction="http://tempuri.org/IControllerService/SaveCathedraResponse")]
        System.IAsyncResult BeginSaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, System.AsyncCallback callback, object asyncState);
        
        void EndSaveCathedra(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControllerServiceChannel : StudyingController.SCS.IControllerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public StudyingController.SCS.Session Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((StudyingController.SCS.Session)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInstitutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInstitutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.InstituteDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacultiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacultiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.FacultyDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCathedrasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCathedrasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.CathedraDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControllerServiceClient : System.ServiceModel.ClientBase<StudyingController.SCS.IControllerService>, StudyingController.SCS.IControllerService {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInstitutesDelegate;
        
        private EndOperationDelegate onEndGetInstitutesDelegate;
        
        private System.Threading.SendOrPostCallback onGetInstitutesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacultiesDelegate;
        
        private EndOperationDelegate onEndGetFacultiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacultiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCathedrasDelegate;
        
        private EndOperationDelegate onEndGetCathedrasDelegate;
        
        private System.Threading.SendOrPostCallback onGetCathedrasCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveInstituteDelegate;
        
        private EndOperationDelegate onEndSaveInstituteDelegate;
        
        private System.Threading.SendOrPostCallback onSaveInstituteCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveFacultyDelegate;
        
        private EndOperationDelegate onEndSaveFacultyDelegate;
        
        private System.Threading.SendOrPostCallback onSaveFacultyCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCathedraDelegate;
        
        private EndOperationDelegate onEndSaveCathedraDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCathedraCompletedDelegate;
        
        public ControllerServiceClient() {
        }
        
        public ControllerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControllerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetInstitutesCompletedEventArgs> GetInstitutesCompleted;
        
        public event System.EventHandler<GetFacultiesCompletedEventArgs> GetFacultiesCompleted;
        
        public event System.EventHandler<GetCathedrasCompletedEventArgs> GetCathedrasCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveInstituteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveFacultyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveCathedraCompleted;
        
        public StudyingController.SCS.Session Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(login, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public StudyingController.SCS.Session EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginLogin(login, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            StudyingController.SCS.Session retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string login, string password) {
            this.LoginAsync(login, password, null);
        }
        
        public void LoginAsync(string login, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        login,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> GetInstitutes(StudyingController.SCS.Session session) {
            return base.Channel.GetInstitutes(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInstitutes(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInstitutes(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> EndGetInstitutes(System.IAsyncResult result) {
            return base.Channel.EndGetInstitutes(result);
        }
        
        private System.IAsyncResult OnBeginGetInstitutes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetInstitutes(session, callback, asyncState);
        }
        
        private object[] OnEndGetInstitutes(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.InstituteDTO> retVal = this.EndGetInstitutes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInstitutesCompleted(object state) {
            if ((this.GetInstitutesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInstitutesCompleted(this, new GetInstitutesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInstitutesAsync(StudyingController.SCS.Session session) {
            this.GetInstitutesAsync(session, null);
        }
        
        public void GetInstitutesAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetInstitutesDelegate == null)) {
                this.onBeginGetInstitutesDelegate = new BeginOperationDelegate(this.OnBeginGetInstitutes);
            }
            if ((this.onEndGetInstitutesDelegate == null)) {
                this.onEndGetInstitutesDelegate = new EndOperationDelegate(this.OnEndGetInstitutes);
            }
            if ((this.onGetInstitutesCompletedDelegate == null)) {
                this.onGetInstitutesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInstitutesCompleted);
            }
            base.InvokeAsync(this.onBeginGetInstitutesDelegate, new object[] {
                        session}, this.onEndGetInstitutesDelegate, this.onGetInstitutesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID) {
            return base.Channel.GetFaculties(session, instituteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFaculties(session, instituteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetFaculties(System.IAsyncResult result) {
            return base.Channel.EndGetFaculties(result);
        }
        
        private System.IAsyncResult OnBeginGetFaculties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            System.Nullable<int> instituteID = ((System.Nullable<int>)(inValues[1]));
            return this.BeginGetFaculties(session, instituteID, callback, asyncState);
        }
        
        private object[] OnEndGetFaculties(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.FacultyDTO> retVal = this.EndGetFaculties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacultiesCompleted(object state) {
            if ((this.GetFacultiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacultiesCompleted(this, new GetFacultiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacultiesAsync(StudyingController.SCS.Session session, System.Nullable<int> instituteID) {
            this.GetFacultiesAsync(session, instituteID, null);
        }
        
        public void GetFacultiesAsync(StudyingController.SCS.Session session, System.Nullable<int> instituteID, object userState) {
            if ((this.onBeginGetFacultiesDelegate == null)) {
                this.onBeginGetFacultiesDelegate = new BeginOperationDelegate(this.OnBeginGetFaculties);
            }
            if ((this.onEndGetFacultiesDelegate == null)) {
                this.onEndGetFacultiesDelegate = new EndOperationDelegate(this.OnEndGetFaculties);
            }
            if ((this.onGetFacultiesCompletedDelegate == null)) {
                this.onGetFacultiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacultiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacultiesDelegate, new object[] {
                        session,
                        instituteID}, this.onEndGetFacultiesDelegate, this.onGetFacultiesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetCathedras(StudyingController.SCS.Session session, int facultyID) {
            return base.Channel.GetCathedras(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCathedras(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCathedras(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetCathedras(System.IAsyncResult result) {
            return base.Channel.EndGetCathedras(result);
        }
        
        private System.IAsyncResult OnBeginGetCathedras(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginGetCathedras(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndGetCathedras(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.CathedraDTO> retVal = this.EndGetCathedras(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCathedrasCompleted(object state) {
            if ((this.GetCathedrasCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCathedrasCompleted(this, new GetCathedrasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCathedrasAsync(StudyingController.SCS.Session session, int facultyID) {
            this.GetCathedrasAsync(session, facultyID, null);
        }
        
        public void GetCathedrasAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginGetCathedrasDelegate == null)) {
                this.onBeginGetCathedrasDelegate = new BeginOperationDelegate(this.OnBeginGetCathedras);
            }
            if ((this.onEndGetCathedrasDelegate == null)) {
                this.onEndGetCathedrasDelegate = new EndOperationDelegate(this.OnEndGetCathedras);
            }
            if ((this.onGetCathedrasCompletedDelegate == null)) {
                this.onGetCathedrasCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCathedrasCompleted);
            }
            base.InvokeAsync(this.onBeginGetCathedrasDelegate, new object[] {
                        session,
                        facultyID}, this.onEndGetCathedrasDelegate, this.onGetCathedrasCompletedDelegate, userState);
        }
        
        public void SaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute) {
            base.Channel.SaveInstitute(session, institute);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveInstitute(session, institute, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveInstitute(System.IAsyncResult result) {
            base.Channel.EndSaveInstitute(result);
        }
        
        private System.IAsyncResult OnBeginSaveInstitute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.InstituteDTO institute = ((EntitiesDTO.InstituteDTO)(inValues[1]));
            return this.BeginSaveInstitute(session, institute, callback, asyncState);
        }
        
        private object[] OnEndSaveInstitute(System.IAsyncResult result) {
            this.EndSaveInstitute(result);
            return null;
        }
        
        private void OnSaveInstituteCompleted(object state) {
            if ((this.SaveInstituteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveInstituteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveInstituteAsync(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute) {
            this.SaveInstituteAsync(session, institute, null);
        }
        
        public void SaveInstituteAsync(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, object userState) {
            if ((this.onBeginSaveInstituteDelegate == null)) {
                this.onBeginSaveInstituteDelegate = new BeginOperationDelegate(this.OnBeginSaveInstitute);
            }
            if ((this.onEndSaveInstituteDelegate == null)) {
                this.onEndSaveInstituteDelegate = new EndOperationDelegate(this.OnEndSaveInstitute);
            }
            if ((this.onSaveInstituteCompletedDelegate == null)) {
                this.onSaveInstituteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveInstituteCompleted);
            }
            base.InvokeAsync(this.onBeginSaveInstituteDelegate, new object[] {
                        session,
                        institute}, this.onEndSaveInstituteDelegate, this.onSaveInstituteCompletedDelegate, userState);
        }
        
        public void SaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty) {
            base.Channel.SaveFaculty(session, faculty);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveFaculty(session, faculty, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveFaculty(System.IAsyncResult result) {
            base.Channel.EndSaveFaculty(result);
        }
        
        private System.IAsyncResult OnBeginSaveFaculty(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.FacultyDTO faculty = ((EntitiesDTO.FacultyDTO)(inValues[1]));
            return this.BeginSaveFaculty(session, faculty, callback, asyncState);
        }
        
        private object[] OnEndSaveFaculty(System.IAsyncResult result) {
            this.EndSaveFaculty(result);
            return null;
        }
        
        private void OnSaveFacultyCompleted(object state) {
            if ((this.SaveFacultyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveFacultyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveFacultyAsync(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty) {
            this.SaveFacultyAsync(session, faculty, null);
        }
        
        public void SaveFacultyAsync(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, object userState) {
            if ((this.onBeginSaveFacultyDelegate == null)) {
                this.onBeginSaveFacultyDelegate = new BeginOperationDelegate(this.OnBeginSaveFaculty);
            }
            if ((this.onEndSaveFacultyDelegate == null)) {
                this.onEndSaveFacultyDelegate = new EndOperationDelegate(this.OnEndSaveFaculty);
            }
            if ((this.onSaveFacultyCompletedDelegate == null)) {
                this.onSaveFacultyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveFacultyCompleted);
            }
            base.InvokeAsync(this.onBeginSaveFacultyDelegate, new object[] {
                        session,
                        faculty}, this.onEndSaveFacultyDelegate, this.onSaveFacultyCompletedDelegate, userState);
        }
        
        public void SaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra) {
            base.Channel.SaveCathedra(session, cathedra);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCathedra(session, cathedra, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveCathedra(System.IAsyncResult result) {
            base.Channel.EndSaveCathedra(result);
        }
        
        private System.IAsyncResult OnBeginSaveCathedra(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.CathedraDTO cathedra = ((EntitiesDTO.CathedraDTO)(inValues[1]));
            return this.BeginSaveCathedra(session, cathedra, callback, asyncState);
        }
        
        private object[] OnEndSaveCathedra(System.IAsyncResult result) {
            this.EndSaveCathedra(result);
            return null;
        }
        
        private void OnSaveCathedraCompleted(object state) {
            if ((this.SaveCathedraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCathedraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCathedraAsync(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra) {
            this.SaveCathedraAsync(session, cathedra, null);
        }
        
        public void SaveCathedraAsync(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, object userState) {
            if ((this.onBeginSaveCathedraDelegate == null)) {
                this.onBeginSaveCathedraDelegate = new BeginOperationDelegate(this.OnBeginSaveCathedra);
            }
            if ((this.onEndSaveCathedraDelegate == null)) {
                this.onEndSaveCathedraDelegate = new EndOperationDelegate(this.OnEndSaveCathedra);
            }
            if ((this.onSaveCathedraCompletedDelegate == null)) {
                this.onSaveCathedraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCathedraCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCathedraDelegate, new object[] {
                        session,
                        cathedra}, this.onEndSaveCathedraDelegate, this.onSaveCathedraCompletedDelegate, userState);
        }
    }
}
