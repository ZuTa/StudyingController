//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudyingController.SCS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.TeacherDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.StudentDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.FacultyAdminDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.InstituteAdminDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.InstituteSecretaryDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EntitiesDTO.FacultySecretaryDTO))]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EntitiesDTO.SystemUserDTO UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EntitiesDTO.SystemUserDTO User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
    [System.SerializableAttribute()]
    public partial class ControllerServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SCS.IControllerService")]
    public interface IControllerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetPracticesTeacher", ReplyAction="http://tempuri.org/IControllerService/GetPracticesTeacherResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetPracticesTeacherControllerServiceExcepti" +
            "onFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.PracticeTeacherDTO> GetPracticesTeacher(StudyingController.SCS.Session session, int teacherID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetPracticesTeacher", ReplyAction="http://tempuri.org/IControllerService/GetPracticesTeacherResponse")]
        System.IAsyncResult BeginGetPracticesTeacher(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.PracticeTeacherDTO> EndGetPracticesTeacher(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetGroupsPractice", ReplyAction="http://tempuri.org/IControllerService/GetGroupsPracticeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetGroupsPracticeControllerServiceException" +
            "Fault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetGroupsPractice(StudyingController.SCS.Session session, int practiceTeacherID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetGroupsPractice", ReplyAction="http://tempuri.org/IControllerService/GetGroupsPracticeResponse")]
        System.IAsyncResult BeginGetGroupsPractice(StudyingController.SCS.Session session, int practiceTeacherID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetGroupsPractice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetTeacherPracticeSubjects", ReplyAction="http://tempuri.org/IControllerService/GetTeacherPracticeSubjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetTeacherPracticeSubjectsControllerService" +
            "ExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.SubjectDTO> GetTeacherPracticeSubjects(StudyingController.SCS.Session session, int teacherID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetTeacherPracticeSubjects", ReplyAction="http://tempuri.org/IControllerService/GetTeacherPracticeSubjectsResponse")]
        System.IAsyncResult BeginGetTeacherPracticeSubjects(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.SubjectDTO> EndGetTeacherPracticeSubjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetAllStudents", ReplyAction="http://tempuri.org/IControllerService/GetAllStudentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetAllStudentsControllerServiceExceptionFau" +
            "lt", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetAllStudents(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetAllStudents", ReplyAction="http://tempuri.org/IControllerService/GetAllStudentsResponse")]
        System.IAsyncResult BeginGetAllStudents(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetAllStudents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetGroupStudents", ReplyAction="http://tempuri.org/IControllerService/GetGroupStudentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetGroupStudentsControllerServiceExceptionF" +
            "ault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetGroupStudents(StudyingController.SCS.Session session, int groupID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetGroupStudents", ReplyAction="http://tempuri.org/IControllerService/GetGroupStudentsResponse")]
        System.IAsyncResult BeginGetGroupStudents(StudyingController.SCS.Session session, int groupID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetGroupStudents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetCathedraStudents", ReplyAction="http://tempuri.org/IControllerService/GetCathedraStudentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetCathedraStudentsControllerServiceExcepti" +
            "onFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetCathedraStudents(StudyingController.SCS.Session session, int cathedraID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetCathedraStudents", ReplyAction="http://tempuri.org/IControllerService/GetCathedraStudentsResponse")]
        System.IAsyncResult BeginGetCathedraStudents(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetCathedraStudents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetFacultyStudents", ReplyAction="http://tempuri.org/IControllerService/GetFacultyStudentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetFacultyStudentsControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetFacultyStudents(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetFacultyStudents", ReplyAction="http://tempuri.org/IControllerService/GetFacultyStudentsResponse")]
        System.IAsyncResult BeginGetFacultyStudents(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetFacultyStudents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetInstituteStudents", ReplyAction="http://tempuri.org/IControllerService/GetInstituteStudentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetInstituteStudentsControllerServiceExcept" +
            "ionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetInstituteStudents(StudyingController.SCS.Session session, int instituteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetInstituteStudents", ReplyAction="http://tempuri.org/IControllerService/GetInstituteStudentsResponse")]
        System.IAsyncResult BeginGetInstituteStudents(StudyingController.SCS.Session session, int instituteID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetInstituteStudents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SavePracticeTeacher", ReplyAction="http://tempuri.org/IControllerService/SavePracticeTeacherResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SavePracticeTeacherControllerServiceExcepti" +
            "onFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SavePracticeTeacher(StudyingController.SCS.Session session, EntitiesDTO.PracticeTeacherDTO practiceTeacher);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SavePracticeTeacher", ReplyAction="http://tempuri.org/IControllerService/SavePracticeTeacherResponse")]
        System.IAsyncResult BeginSavePracticeTeacher(StudyingController.SCS.Session session, EntitiesDTO.PracticeTeacherDTO practiceTeacher, System.AsyncCallback callback, object asyncState);
        
        void EndSavePracticeTeacher(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetFacultyGroups", ReplyAction="http://tempuri.org/IControllerService/GetFacultyGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetFacultyGroupsControllerServiceExceptionF" +
            "ault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetFacultyGroups(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetFacultyGroups", ReplyAction="http://tempuri.org/IControllerService/GetFacultyGroupsResponse")]
        System.IAsyncResult BeginGetFacultyGroups(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetFacultyGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetInstituteGroups", ReplyAction="http://tempuri.org/IControllerService/GetInstituteGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetInstituteGroupsControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetInstituteGroups(StudyingController.SCS.Session session, int instituteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetInstituteGroups", ReplyAction="http://tempuri.org/IControllerService/GetInstituteGroupsResponse")]
        System.IAsyncResult BeginGetInstituteGroups(StudyingController.SCS.Session session, int instituteID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetInstituteGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SavePracticeTeacherSubjects", ReplyAction="http://tempuri.org/IControllerService/SavePracticeTeacherSubjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SavePracticeTeacherSubjectsControllerServic" +
            "eExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SavePracticeTeacherSubjects(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SavePracticeTeacherSubjects", ReplyAction="http://tempuri.org/IControllerService/SavePracticeTeacherSubjectsResponse")]
        System.IAsyncResult BeginSavePracticeTeacherSubjects(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects, System.AsyncCallback callback, object asyncState);
        
        void EndSavePracticeTeacherSubjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetTeacher", ReplyAction="http://tempuri.org/IControllerService/GetTeacherResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetTeacherControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        EntitiesDTO.TeacherDTO GetTeacher(StudyingController.SCS.Session session, int teacherID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetTeacher", ReplyAction="http://tempuri.org/IControllerService/GetTeacherResponse")]
        System.IAsyncResult BeginGetTeacher(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState);
        
        EntitiesDTO.TeacherDTO EndGetTeacher(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetInstituteByID", ReplyAction="http://tempuri.org/IControllerService/GetInstituteByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetInstituteByIDControllerServiceExceptionF" +
            "ault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        EntitiesDTO.InstituteDTO GetInstituteByID(StudyingController.SCS.Session session, System.Nullable<int> instituteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetInstituteByID", ReplyAction="http://tempuri.org/IControllerService/GetInstituteByIDResponse")]
        System.IAsyncResult BeginGetInstituteByID(StudyingController.SCS.Session session, System.Nullable<int> instituteID, System.AsyncCallback callback, object asyncState);
        
        EntitiesDTO.InstituteDTO EndGetInstituteByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetFacultyByID", ReplyAction="http://tempuri.org/IControllerService/GetFacultyByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetFacultyByIDControllerServiceExceptionFau" +
            "lt", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        EntitiesDTO.FacultyDTO GetFacultyByID(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetFacultyByID", ReplyAction="http://tempuri.org/IControllerService/GetFacultyByIDResponse")]
        System.IAsyncResult BeginGetFacultyByID(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        EntitiesDTO.FacultyDTO EndGetFacultyByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetCathedraByID", ReplyAction="http://tempuri.org/IControllerService/GetCathedraByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetCathedraByIDControllerServiceExceptionFa" +
            "ult", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        EntitiesDTO.CathedraDTO GetCathedraByID(StudyingController.SCS.Session session, int cathedraID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetCathedraByID", ReplyAction="http://tempuri.org/IControllerService/GetCathedraByIDResponse")]
        System.IAsyncResult BeginGetCathedraByID(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState);
        
        EntitiesDTO.CathedraDTO EndGetCathedraByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetLectureControls", ReplyAction="http://tempuri.org/IControllerService/GetLectureControlsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetLectureControlsControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.ControlDTO> GetLectureControls(StudyingController.SCS.Session session, int lectureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetLectureControls", ReplyAction="http://tempuri.org/IControllerService/GetLectureControlsResponse")]
        System.IAsyncResult BeginGetLectureControls(StudyingController.SCS.Session session, int lectureID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.ControlDTO> EndGetLectureControls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveLectureControls", ReplyAction="http://tempuri.org/IControllerService/SaveLectureControlsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveLectureControlsControllerServiceExcepti" +
            "onFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveLectureControls(StudyingController.SCS.Session session, int lectureID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveLectureControls", ReplyAction="http://tempuri.org/IControllerService/SaveLectureControlsResponse")]
        System.IAsyncResult BeginSaveLectureControls(StudyingController.SCS.Session session, int lectureID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls, System.AsyncCallback callback, object asyncState);
        
        void EndSaveLectureControls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetPracticeControls", ReplyAction="http://tempuri.org/IControllerService/GetPracticeControlsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetPracticeControlsControllerServiceExcepti" +
            "onFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.ControlDTO> GetPracticeControls(StudyingController.SCS.Session session, int practiceID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetPracticeControls", ReplyAction="http://tempuri.org/IControllerService/GetPracticeControlsResponse")]
        System.IAsyncResult BeginGetPracticeControls(StudyingController.SCS.Session session, int practiceID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.ControlDTO> EndGetPracticeControls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SavePracticeControls", ReplyAction="http://tempuri.org/IControllerService/SavePracticeControlsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SavePracticeControlsControllerServiceExcept" +
            "ionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SavePracticeControls(StudyingController.SCS.Session session, int practiceID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SavePracticeControls", ReplyAction="http://tempuri.org/IControllerService/SavePracticeControlsResponse")]
        System.IAsyncResult BeginSavePracticeControls(StudyingController.SCS.Session session, int practiceID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls, System.AsyncCallback callback, object asyncState);
        
        void EndSavePracticeControls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetControlMessages", ReplyAction="http://tempuri.org/IControllerService/GetControlMessagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetControlMessagesControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.ControlMessageDTO> GetControlMessages(StudyingController.SCS.Session session, int controlID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetControlMessages", ReplyAction="http://tempuri.org/IControllerService/GetControlMessagesResponse")]
        System.IAsyncResult BeginGetControlMessages(StudyingController.SCS.Session session, int controlID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.ControlMessageDTO> EndGetControlMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveControlMessage", ReplyAction="http://tempuri.org/IControllerService/SaveControlMessageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveControlMessageControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.TeacherDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.StudentDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.FacultyAdminDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.InstituteAdminDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.InstituteSecretaryDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.FacultySecretaryDTO))]
        void SaveControlMessage(StudyingController.SCS.Session session, EntitiesDTO.ControlMessageDTO message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveControlMessage", ReplyAction="http://tempuri.org/IControllerService/SaveControlMessageResponse")]
        System.IAsyncResult BeginSaveControlMessage(StudyingController.SCS.Session session, EntitiesDTO.ControlMessageDTO message, System.AsyncCallback callback, object asyncState);
        
        void EndSaveControlMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveLectureControl", ReplyAction="http://tempuri.org/IControllerService/SaveLectureControlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveLectureControlControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveLectureControl(StudyingController.SCS.Session session, EntitiesDTO.ControlDTO control, int lectureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveLectureControl", ReplyAction="http://tempuri.org/IControllerService/SaveLectureControlResponse")]
        System.IAsyncResult BeginSaveLectureControl(StudyingController.SCS.Session session, EntitiesDTO.ControlDTO control, int lectureID, System.AsyncCallback callback, object asyncState);
        
        void EndSaveLectureControl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetStudentLectures", ReplyAction="http://tempuri.org/IControllerService/GetStudentLecturesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetStudentLecturesControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.LectureDTO> GetStudentLectures(StudyingController.SCS.Session session, int studentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetStudentLectures", ReplyAction="http://tempuri.org/IControllerService/GetStudentLecturesResponse")]
        System.IAsyncResult BeginGetStudentLectures(StudyingController.SCS.Session session, int studentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.LectureDTO> EndGetStudentLectures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetAttachments", ReplyAction="http://tempuri.org/IControllerService/GetAttachmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetAttachmentsControllerServiceExceptionFau" +
            "lt", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> GetAttachments(StudyingController.SCS.Session session, int teacherID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetAttachments", ReplyAction="http://tempuri.org/IControllerService/GetAttachmentsResponse")]
        System.IAsyncResult BeginGetAttachments(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> EndGetAttachments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveAttachments", ReplyAction="http://tempuri.org/IControllerService/SaveAttachmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveAttachmentsControllerServiceExceptionFa" +
            "ult", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveAttachments(StudyingController.SCS.Session session, int userID, System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> attachments);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveAttachments", ReplyAction="http://tempuri.org/IControllerService/SaveAttachmentsResponse")]
        System.IAsyncResult BeginSaveAttachments(StudyingController.SCS.Session session, int userID, System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> attachments, System.AsyncCallback callback, object asyncState);
        
        void EndSaveAttachments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteAttachment", ReplyAction="http://tempuri.org/IControllerService/DeleteAttachmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteAttachmentControllerServiceExceptionF" +
            "ault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteAttachment(StudyingController.SCS.Session session, int attachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteAttachment", ReplyAction="http://tempuri.org/IControllerService/DeleteAttachmentResponse")]
        System.IAsyncResult BeginDeleteAttachment(StudyingController.SCS.Session session, int attachmentID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteAttachment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/Login", ReplyAction="http://tempuri.org/IControllerService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/LoginControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        StudyingController.SCS.Session Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/Login", ReplyAction="http://tempuri.org/IControllerService/LoginResponse")]
        System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState);
        
        StudyingController.SCS.Session EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetInstitutes", ReplyAction="http://tempuri.org/IControllerService/GetInstitutesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetInstitutesControllerServiceExceptionFaul" +
            "t", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.InstituteDTO> GetInstitutes(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetInstitutes", ReplyAction="http://tempuri.org/IControllerService/GetInstitutesResponse")]
        System.IAsyncResult BeginGetInstitutes(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.InstituteDTO> EndGetInstitutes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetAllFaculties", ReplyAction="http://tempuri.org/IControllerService/GetAllFacultiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetAllFacultiesControllerServiceExceptionFa" +
            "ult", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetAllFaculties(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetAllFaculties", ReplyAction="http://tempuri.org/IControllerService/GetAllFacultiesResponse")]
        System.IAsyncResult BeginGetAllFaculties(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetAllFaculties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetFaculties", ReplyAction="http://tempuri.org/IControllerService/GetFacultiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetFacultiesControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetFaculties", ReplyAction="http://tempuri.org/IControllerService/GetFacultiesResponse")]
        System.IAsyncResult BeginGetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetFaculties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetAllCathedras", ReplyAction="http://tempuri.org/IControllerService/GetAllCathedrasResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetAllCathedrasControllerServiceExceptionFa" +
            "ult", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetAllCathedras(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetAllCathedras", ReplyAction="http://tempuri.org/IControllerService/GetAllCathedrasResponse")]
        System.IAsyncResult BeginGetAllCathedras(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetAllCathedras(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetCathedras", ReplyAction="http://tempuri.org/IControllerService/GetCathedrasResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetCathedrasControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetCathedras(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetCathedras", ReplyAction="http://tempuri.org/IControllerService/GetCathedrasResponse")]
        System.IAsyncResult BeginGetCathedras(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetCathedras(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetGroups", ReplyAction="http://tempuri.org/IControllerService/GetGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetGroupsControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetGroups(StudyingController.SCS.Session session, int cathedraID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetGroups", ReplyAction="http://tempuri.org/IControllerService/GetGroupsResponse")]
        System.IAsyncResult BeginGetGroups(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetAllGroups", ReplyAction="http://tempuri.org/IControllerService/GetAllGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetAllGroupsControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetAllGroups(StudyingController.SCS.Session session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetAllGroups", ReplyAction="http://tempuri.org/IControllerService/GetAllGroupsResponse")]
        System.IAsyncResult BeginGetAllGroups(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetAllGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveInstitute", ReplyAction="http://tempuri.org/IControllerService/SaveInstituteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveInstituteControllerServiceExceptionFaul" +
            "t", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveInstitute", ReplyAction="http://tempuri.org/IControllerService/SaveInstituteResponse")]
        System.IAsyncResult BeginSaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, System.AsyncCallback callback, object asyncState);
        
        void EndSaveInstitute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveFaculty", ReplyAction="http://tempuri.org/IControllerService/SaveFacultyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveFacultyControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveFaculty", ReplyAction="http://tempuri.org/IControllerService/SaveFacultyResponse")]
        System.IAsyncResult BeginSaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, System.AsyncCallback callback, object asyncState);
        
        void EndSaveFaculty(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveCathedra", ReplyAction="http://tempuri.org/IControllerService/SaveCathedraResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveCathedraControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveCathedra", ReplyAction="http://tempuri.org/IControllerService/SaveCathedraResponse")]
        System.IAsyncResult BeginSaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, System.AsyncCallback callback, object asyncState);
        
        void EndSaveCathedra(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveGroup", ReplyAction="http://tempuri.org/IControllerService/SaveGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveGroupControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveGroup(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveGroup", ReplyAction="http://tempuri.org/IControllerService/SaveGroupResponse")]
        System.IAsyncResult BeginSaveGroup(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group, System.AsyncCallback callback, object asyncState);
        
        void EndSaveGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetUsers", ReplyAction="http://tempuri.org/IControllerService/GetUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetUsersControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> GetUsers(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetUsers", ReplyAction="http://tempuri.org/IControllerService/GetUsersResponse")]
        System.IAsyncResult BeginGetUsers(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> EndGetUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveUser", ReplyAction="http://tempuri.org/IControllerService/SaveUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveUserControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.TeacherDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.StudentDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.FacultyAdminDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.InstituteAdminDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.InstituteSecretaryDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntitiesDTO.FacultySecretaryDTO))]
        void SaveUser(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveUser", ReplyAction="http://tempuri.org/IControllerService/SaveUserResponse")]
        System.IAsyncResult BeginSaveUser(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user, System.AsyncCallback callback, object asyncState);
        
        void EndSaveUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetSpecializations", ReplyAction="http://tempuri.org/IControllerService/GetSpecializationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetSpecializationsControllerServiceExceptio" +
            "nFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> GetSpecializations(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetSpecializations", ReplyAction="http://tempuri.org/IControllerService/GetSpecializationsResponse")]
        System.IAsyncResult BeginGetSpecializations(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> EndGetSpecializations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteInstitute", ReplyAction="http://tempuri.org/IControllerService/DeleteInstituteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteInstituteControllerServiceExceptionFa" +
            "ult", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteInstitute(StudyingController.SCS.Session session, int instituteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteInstitute", ReplyAction="http://tempuri.org/IControllerService/DeleteInstituteResponse")]
        System.IAsyncResult BeginDeleteInstitute(StudyingController.SCS.Session session, int instituteID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteInstitute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteFaculty", ReplyAction="http://tempuri.org/IControllerService/DeleteFacultyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteFacultyControllerServiceExceptionFaul" +
            "t", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteFaculty(StudyingController.SCS.Session session, int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteFaculty", ReplyAction="http://tempuri.org/IControllerService/DeleteFacultyResponse")]
        System.IAsyncResult BeginDeleteFaculty(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteFaculty(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteCathedra", ReplyAction="http://tempuri.org/IControllerService/DeleteCathedraResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteCathedraControllerServiceExceptionFau" +
            "lt", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteCathedra(StudyingController.SCS.Session session, int cathedraID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteCathedra", ReplyAction="http://tempuri.org/IControllerService/DeleteCathedraResponse")]
        System.IAsyncResult BeginDeleteCathedra(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCathedra(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteGroup", ReplyAction="http://tempuri.org/IControllerService/DeleteGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteGroupControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteGroup(StudyingController.SCS.Session session, int groupID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteGroup", ReplyAction="http://tempuri.org/IControllerService/DeleteGroupResponse")]
        System.IAsyncResult BeginDeleteGroup(StudyingController.SCS.Session session, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/DeleteUser", ReplyAction="http://tempuri.org/IControllerService/DeleteUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/DeleteUserControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void DeleteUser(StudyingController.SCS.Session session, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/DeleteUser", ReplyAction="http://tempuri.org/IControllerService/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(StudyingController.SCS.Session session, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetGroupByID", ReplyAction="http://tempuri.org/IControllerService/GetGroupByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetGroupByIDControllerServiceExceptionFault" +
            "", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        EntitiesDTO.GroupDTO GetGroupByID(StudyingController.SCS.Session session, System.Nullable<int> groupID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetGroupByID", ReplyAction="http://tempuri.org/IControllerService/GetGroupByIDResponse")]
        System.IAsyncResult BeginGetGroupByID(StudyingController.SCS.Session session, System.Nullable<int> groupID, System.AsyncCallback callback, object asyncState);
        
        EntitiesDTO.GroupDTO EndGetGroupByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetSpecializationByID", ReplyAction="http://tempuri.org/IControllerService/GetSpecializationByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetSpecializationByIDControllerServiceExcep" +
            "tionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        EntitiesDTO.SpecializationDTO GetSpecializationByID(StudyingController.SCS.Session session, System.Nullable<int> specializationID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetSpecializationByID", ReplyAction="http://tempuri.org/IControllerService/GetSpecializationByIDResponse")]
        System.IAsyncResult BeginGetSpecializationByID(StudyingController.SCS.Session session, System.Nullable<int> specializationID, System.AsyncCallback callback, object asyncState);
        
        EntitiesDTO.SpecializationDTO EndGetSpecializationByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetLectures", ReplyAction="http://tempuri.org/IControllerService/GetLecturesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetLecturesControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.LectureDTO> GetLectures(StudyingController.SCS.Session session, int teacherID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetLectures", ReplyAction="http://tempuri.org/IControllerService/GetLecturesResponse")]
        System.IAsyncResult BeginGetLectures(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.LectureDTO> EndGetLectures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetLectureGroups", ReplyAction="http://tempuri.org/IControllerService/GetLectureGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetLectureGroupsControllerServiceExceptionF" +
            "ault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetLectureGroups(StudyingController.SCS.Session session, int lectureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetLectureGroups", ReplyAction="http://tempuri.org/IControllerService/GetLectureGroupsResponse")]
        System.IAsyncResult BeginGetLectureGroups(StudyingController.SCS.Session session, int lectureID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetLectureGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetTeachers", ReplyAction="http://tempuri.org/IControllerService/GetTeachersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetTeachersControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.TeacherDTO> GetTeachers(StudyingController.SCS.Session session, int cathedraID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetTeachers", ReplyAction="http://tempuri.org/IControllerService/GetTeachersResponse")]
        System.IAsyncResult BeginGetTeachers(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.TeacherDTO> EndGetTeachers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/GetSubjects", ReplyAction="http://tempuri.org/IControllerService/GetSubjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/GetSubjectsControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        System.Collections.Generic.List<EntitiesDTO.SubjectDTO> GetSubjects(StudyingController.SCS.Session session, int cathedraID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/GetSubjects", ReplyAction="http://tempuri.org/IControllerService/GetSubjectsResponse")]
        System.IAsyncResult BeginGetSubjects(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EntitiesDTO.SubjectDTO> EndGetSubjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveLecture", ReplyAction="http://tempuri.org/IControllerService/SaveLectureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveLectureControllerServiceExceptionFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveLecture(StudyingController.SCS.Session session, EntitiesDTO.LectureDTO lecture);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveLecture", ReplyAction="http://tempuri.org/IControllerService/SaveLectureResponse")]
        System.IAsyncResult BeginSaveLecture(StudyingController.SCS.Session session, EntitiesDTO.LectureDTO lecture, System.AsyncCallback callback, object asyncState);
        
        void EndSaveLecture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerService/SaveTeacherSubjects", ReplyAction="http://tempuri.org/IControllerService/SaveTeacherSubjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StudyingController.SCS.ControllerServiceException), Action="http://tempuri.org/IControllerService/SaveTeacherSubjectsControllerServiceExcepti" +
            "onFault", Name="ControllerServiceException", Namespace="http://schemas.datacontract.org/2004/07/StudyingControllerService")]
        void SaveTeacherSubjects(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControllerService/SaveTeacherSubjects", ReplyAction="http://tempuri.org/IControllerService/SaveTeacherSubjectsResponse")]
        System.IAsyncResult BeginSaveTeacherSubjects(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects, System.AsyncCallback callback, object asyncState);
        
        void EndSaveTeacherSubjects(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControllerServiceChannel : StudyingController.SCS.IControllerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPracticesTeacherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPracticesTeacherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.PracticeTeacherDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.PracticeTeacherDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupsPracticeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupsPracticeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.GroupDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTeacherPracticeSubjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTeacherPracticeSubjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SubjectDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.SubjectDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllStudentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllStudentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.StudentDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupStudentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupStudentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.StudentDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCathedraStudentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCathedraStudentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.StudentDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacultyStudentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacultyStudentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.StudentDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInstituteStudentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInstituteStudentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.StudentDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacultyGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacultyGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.GroupDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInstituteGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInstituteGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.GroupDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTeacherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTeacherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EntitiesDTO.TeacherDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EntitiesDTO.TeacherDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInstituteByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInstituteByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EntitiesDTO.InstituteDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EntitiesDTO.InstituteDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacultyByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacultyByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EntitiesDTO.FacultyDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EntitiesDTO.FacultyDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCathedraByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCathedraByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EntitiesDTO.CathedraDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EntitiesDTO.CathedraDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLectureControlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLectureControlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.ControlDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.ControlDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPracticeControlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPracticeControlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.ControlDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.ControlDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetControlMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetControlMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.ControlMessageDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.ControlMessageDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStudentLecturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStudentLecturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.LectureDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAttachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAttachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.AttachmentDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public StudyingController.SCS.Session Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((StudyingController.SCS.Session)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInstitutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInstitutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.InstituteDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllFacultiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllFacultiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.FacultyDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacultiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacultiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.FacultyDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCathedrasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCathedrasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.CathedraDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCathedrasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCathedrasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.CathedraDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.GroupDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.GroupDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.SystemUserDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSpecializationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpecializationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.SpecializationDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EntitiesDTO.GroupDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EntitiesDTO.GroupDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSpecializationByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpecializationByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EntitiesDTO.SpecializationDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EntitiesDTO.SpecializationDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLecturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLecturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.LectureDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLectureGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLectureGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.GroupDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTeachersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTeachersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.TeacherDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.TeacherDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSubjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSubjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SubjectDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EntitiesDTO.SubjectDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControllerServiceClient : System.ServiceModel.ClientBase<StudyingController.SCS.IControllerService>, StudyingController.SCS.IControllerService {
        
        private BeginOperationDelegate onBeginGetPracticesTeacherDelegate;
        
        private EndOperationDelegate onEndGetPracticesTeacherDelegate;
        
        private System.Threading.SendOrPostCallback onGetPracticesTeacherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupsPracticeDelegate;
        
        private EndOperationDelegate onEndGetGroupsPracticeDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupsPracticeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTeacherPracticeSubjectsDelegate;
        
        private EndOperationDelegate onEndGetTeacherPracticeSubjectsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTeacherPracticeSubjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllStudentsDelegate;
        
        private EndOperationDelegate onEndGetAllStudentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllStudentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupStudentsDelegate;
        
        private EndOperationDelegate onEndGetGroupStudentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupStudentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCathedraStudentsDelegate;
        
        private EndOperationDelegate onEndGetCathedraStudentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCathedraStudentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacultyStudentsDelegate;
        
        private EndOperationDelegate onEndGetFacultyStudentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacultyStudentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInstituteStudentsDelegate;
        
        private EndOperationDelegate onEndGetInstituteStudentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetInstituteStudentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSavePracticeTeacherDelegate;
        
        private EndOperationDelegate onEndSavePracticeTeacherDelegate;
        
        private System.Threading.SendOrPostCallback onSavePracticeTeacherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacultyGroupsDelegate;
        
        private EndOperationDelegate onEndGetFacultyGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacultyGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInstituteGroupsDelegate;
        
        private EndOperationDelegate onEndGetInstituteGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetInstituteGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSavePracticeTeacherSubjectsDelegate;
        
        private EndOperationDelegate onEndSavePracticeTeacherSubjectsDelegate;
        
        private System.Threading.SendOrPostCallback onSavePracticeTeacherSubjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTeacherDelegate;
        
        private EndOperationDelegate onEndGetTeacherDelegate;
        
        private System.Threading.SendOrPostCallback onGetTeacherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInstituteByIDDelegate;
        
        private EndOperationDelegate onEndGetInstituteByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetInstituteByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacultyByIDDelegate;
        
        private EndOperationDelegate onEndGetFacultyByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacultyByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCathedraByIDDelegate;
        
        private EndOperationDelegate onEndGetCathedraByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetCathedraByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLectureControlsDelegate;
        
        private EndOperationDelegate onEndGetLectureControlsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLectureControlsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveLectureControlsDelegate;
        
        private EndOperationDelegate onEndSaveLectureControlsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveLectureControlsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPracticeControlsDelegate;
        
        private EndOperationDelegate onEndGetPracticeControlsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPracticeControlsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSavePracticeControlsDelegate;
        
        private EndOperationDelegate onEndSavePracticeControlsDelegate;
        
        private System.Threading.SendOrPostCallback onSavePracticeControlsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetControlMessagesDelegate;
        
        private EndOperationDelegate onEndGetControlMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetControlMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveControlMessageDelegate;
        
        private EndOperationDelegate onEndSaveControlMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSaveControlMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveLectureControlDelegate;
        
        private EndOperationDelegate onEndSaveLectureControlDelegate;
        
        private System.Threading.SendOrPostCallback onSaveLectureControlCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStudentLecturesDelegate;
        
        private EndOperationDelegate onEndGetStudentLecturesDelegate;
        
        private System.Threading.SendOrPostCallback onGetStudentLecturesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAttachmentsDelegate;
        
        private EndOperationDelegate onEndGetAttachmentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAttachmentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveAttachmentsDelegate;
        
        private EndOperationDelegate onEndSaveAttachmentsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveAttachmentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAttachmentDelegate;
        
        private EndOperationDelegate onEndDeleteAttachmentDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAttachmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInstitutesDelegate;
        
        private EndOperationDelegate onEndGetInstitutesDelegate;
        
        private System.Threading.SendOrPostCallback onGetInstitutesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllFacultiesDelegate;
        
        private EndOperationDelegate onEndGetAllFacultiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllFacultiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacultiesDelegate;
        
        private EndOperationDelegate onEndGetFacultiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacultiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCathedrasDelegate;
        
        private EndOperationDelegate onEndGetAllCathedrasDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCathedrasCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCathedrasDelegate;
        
        private EndOperationDelegate onEndGetCathedrasDelegate;
        
        private System.Threading.SendOrPostCallback onGetCathedrasCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupsDelegate;
        
        private EndOperationDelegate onEndGetGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllGroupsDelegate;
        
        private EndOperationDelegate onEndGetAllGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveInstituteDelegate;
        
        private EndOperationDelegate onEndSaveInstituteDelegate;
        
        private System.Threading.SendOrPostCallback onSaveInstituteCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveFacultyDelegate;
        
        private EndOperationDelegate onEndSaveFacultyDelegate;
        
        private System.Threading.SendOrPostCallback onSaveFacultyCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCathedraDelegate;
        
        private EndOperationDelegate onEndSaveCathedraDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCathedraCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveGroupDelegate;
        
        private EndOperationDelegate onEndSaveGroupDelegate;
        
        private System.Threading.SendOrPostCallback onSaveGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUserDelegate;
        
        private EndOperationDelegate onEndSaveUserDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSpecializationsDelegate;
        
        private EndOperationDelegate onEndGetSpecializationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpecializationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteInstituteDelegate;
        
        private EndOperationDelegate onEndDeleteInstituteDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteInstituteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFacultyDelegate;
        
        private EndOperationDelegate onEndDeleteFacultyDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFacultyCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCathedraDelegate;
        
        private EndOperationDelegate onEndDeleteCathedraDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCathedraCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteGroupDelegate;
        
        private EndOperationDelegate onEndDeleteGroupDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupByIDDelegate;
        
        private EndOperationDelegate onEndGetGroupByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSpecializationByIDDelegate;
        
        private EndOperationDelegate onEndGetSpecializationByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpecializationByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLecturesDelegate;
        
        private EndOperationDelegate onEndGetLecturesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLecturesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLectureGroupsDelegate;
        
        private EndOperationDelegate onEndGetLectureGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLectureGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTeachersDelegate;
        
        private EndOperationDelegate onEndGetTeachersDelegate;
        
        private System.Threading.SendOrPostCallback onGetTeachersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSubjectsDelegate;
        
        private EndOperationDelegate onEndGetSubjectsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSubjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveLectureDelegate;
        
        private EndOperationDelegate onEndSaveLectureDelegate;
        
        private System.Threading.SendOrPostCallback onSaveLectureCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveTeacherSubjectsDelegate;
        
        private EndOperationDelegate onEndSaveTeacherSubjectsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveTeacherSubjectsCompletedDelegate;
        
        public ControllerServiceClient() {
        }
        
        public ControllerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControllerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetPracticesTeacherCompletedEventArgs> GetPracticesTeacherCompleted;
        
        public event System.EventHandler<GetGroupsPracticeCompletedEventArgs> GetGroupsPracticeCompleted;
        
        public event System.EventHandler<GetTeacherPracticeSubjectsCompletedEventArgs> GetTeacherPracticeSubjectsCompleted;
        
        public event System.EventHandler<GetAllStudentsCompletedEventArgs> GetAllStudentsCompleted;
        
        public event System.EventHandler<GetGroupStudentsCompletedEventArgs> GetGroupStudentsCompleted;
        
        public event System.EventHandler<GetCathedraStudentsCompletedEventArgs> GetCathedraStudentsCompleted;
        
        public event System.EventHandler<GetFacultyStudentsCompletedEventArgs> GetFacultyStudentsCompleted;
        
        public event System.EventHandler<GetInstituteStudentsCompletedEventArgs> GetInstituteStudentsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SavePracticeTeacherCompleted;
        
        public event System.EventHandler<GetFacultyGroupsCompletedEventArgs> GetFacultyGroupsCompleted;
        
        public event System.EventHandler<GetInstituteGroupsCompletedEventArgs> GetInstituteGroupsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SavePracticeTeacherSubjectsCompleted;
        
        public event System.EventHandler<GetTeacherCompletedEventArgs> GetTeacherCompleted;
        
        public event System.EventHandler<GetInstituteByIDCompletedEventArgs> GetInstituteByIDCompleted;
        
        public event System.EventHandler<GetFacultyByIDCompletedEventArgs> GetFacultyByIDCompleted;
        
        public event System.EventHandler<GetCathedraByIDCompletedEventArgs> GetCathedraByIDCompleted;
        
        public event System.EventHandler<GetLectureControlsCompletedEventArgs> GetLectureControlsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveLectureControlsCompleted;
        
        public event System.EventHandler<GetPracticeControlsCompletedEventArgs> GetPracticeControlsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SavePracticeControlsCompleted;
        
        public event System.EventHandler<GetControlMessagesCompletedEventArgs> GetControlMessagesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveControlMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveLectureControlCompleted;
        
        public event System.EventHandler<GetStudentLecturesCompletedEventArgs> GetStudentLecturesCompleted;
        
        public event System.EventHandler<GetAttachmentsCompletedEventArgs> GetAttachmentsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveAttachmentsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAttachmentCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetInstitutesCompletedEventArgs> GetInstitutesCompleted;
        
        public event System.EventHandler<GetAllFacultiesCompletedEventArgs> GetAllFacultiesCompleted;
        
        public event System.EventHandler<GetFacultiesCompletedEventArgs> GetFacultiesCompleted;
        
        public event System.EventHandler<GetAllCathedrasCompletedEventArgs> GetAllCathedrasCompleted;
        
        public event System.EventHandler<GetCathedrasCompletedEventArgs> GetCathedrasCompleted;
        
        public event System.EventHandler<GetGroupsCompletedEventArgs> GetGroupsCompleted;
        
        public event System.EventHandler<GetAllGroupsCompletedEventArgs> GetAllGroupsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveInstituteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveFacultyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveCathedraCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveGroupCompleted;
        
        public event System.EventHandler<GetUsersCompletedEventArgs> GetUsersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveUserCompleted;
        
        public event System.EventHandler<GetSpecializationsCompletedEventArgs> GetSpecializationsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteInstituteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFacultyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCathedraCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<GetGroupByIDCompletedEventArgs> GetGroupByIDCompleted;
        
        public event System.EventHandler<GetSpecializationByIDCompletedEventArgs> GetSpecializationByIDCompleted;
        
        public event System.EventHandler<GetLecturesCompletedEventArgs> GetLecturesCompleted;
        
        public event System.EventHandler<GetLectureGroupsCompletedEventArgs> GetLectureGroupsCompleted;
        
        public event System.EventHandler<GetTeachersCompletedEventArgs> GetTeachersCompleted;
        
        public event System.EventHandler<GetSubjectsCompletedEventArgs> GetSubjectsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveLectureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveTeacherSubjectsCompleted;
        
        public System.Collections.Generic.List<EntitiesDTO.PracticeTeacherDTO> GetPracticesTeacher(StudyingController.SCS.Session session, int teacherID) {
            return base.Channel.GetPracticesTeacher(session, teacherID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPracticesTeacher(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPracticesTeacher(session, teacherID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.PracticeTeacherDTO> EndGetPracticesTeacher(System.IAsyncResult result) {
            return base.Channel.EndGetPracticesTeacher(result);
        }
        
        private System.IAsyncResult OnBeginGetPracticesTeacher(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int teacherID = ((int)(inValues[1]));
            return this.BeginGetPracticesTeacher(session, teacherID, callback, asyncState);
        }
        
        private object[] OnEndGetPracticesTeacher(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.PracticeTeacherDTO> retVal = this.EndGetPracticesTeacher(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPracticesTeacherCompleted(object state) {
            if ((this.GetPracticesTeacherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPracticesTeacherCompleted(this, new GetPracticesTeacherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPracticesTeacherAsync(StudyingController.SCS.Session session, int teacherID) {
            this.GetPracticesTeacherAsync(session, teacherID, null);
        }
        
        public void GetPracticesTeacherAsync(StudyingController.SCS.Session session, int teacherID, object userState) {
            if ((this.onBeginGetPracticesTeacherDelegate == null)) {
                this.onBeginGetPracticesTeacherDelegate = new BeginOperationDelegate(this.OnBeginGetPracticesTeacher);
            }
            if ((this.onEndGetPracticesTeacherDelegate == null)) {
                this.onEndGetPracticesTeacherDelegate = new EndOperationDelegate(this.OnEndGetPracticesTeacher);
            }
            if ((this.onGetPracticesTeacherCompletedDelegate == null)) {
                this.onGetPracticesTeacherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPracticesTeacherCompleted);
            }
            base.InvokeAsync(this.onBeginGetPracticesTeacherDelegate, new object[] {
                        session,
                        teacherID}, this.onEndGetPracticesTeacherDelegate, this.onGetPracticesTeacherCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetGroupsPractice(StudyingController.SCS.Session session, int practiceTeacherID) {
            return base.Channel.GetGroupsPractice(session, practiceTeacherID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupsPractice(StudyingController.SCS.Session session, int practiceTeacherID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupsPractice(session, practiceTeacherID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetGroupsPractice(System.IAsyncResult result) {
            return base.Channel.EndGetGroupsPractice(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupsPractice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int practiceTeacherID = ((int)(inValues[1]));
            return this.BeginGetGroupsPractice(session, practiceTeacherID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupsPractice(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.GroupDTO> retVal = this.EndGetGroupsPractice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupsPracticeCompleted(object state) {
            if ((this.GetGroupsPracticeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupsPracticeCompleted(this, new GetGroupsPracticeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupsPracticeAsync(StudyingController.SCS.Session session, int practiceTeacherID) {
            this.GetGroupsPracticeAsync(session, practiceTeacherID, null);
        }
        
        public void GetGroupsPracticeAsync(StudyingController.SCS.Session session, int practiceTeacherID, object userState) {
            if ((this.onBeginGetGroupsPracticeDelegate == null)) {
                this.onBeginGetGroupsPracticeDelegate = new BeginOperationDelegate(this.OnBeginGetGroupsPractice);
            }
            if ((this.onEndGetGroupsPracticeDelegate == null)) {
                this.onEndGetGroupsPracticeDelegate = new EndOperationDelegate(this.OnEndGetGroupsPractice);
            }
            if ((this.onGetGroupsPracticeCompletedDelegate == null)) {
                this.onGetGroupsPracticeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupsPracticeCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupsPracticeDelegate, new object[] {
                        session,
                        practiceTeacherID}, this.onEndGetGroupsPracticeDelegate, this.onGetGroupsPracticeCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SubjectDTO> GetTeacherPracticeSubjects(StudyingController.SCS.Session session, int teacherID) {
            return base.Channel.GetTeacherPracticeSubjects(session, teacherID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTeacherPracticeSubjects(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTeacherPracticeSubjects(session, teacherID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.SubjectDTO> EndGetTeacherPracticeSubjects(System.IAsyncResult result) {
            return base.Channel.EndGetTeacherPracticeSubjects(result);
        }
        
        private System.IAsyncResult OnBeginGetTeacherPracticeSubjects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int teacherID = ((int)(inValues[1]));
            return this.BeginGetTeacherPracticeSubjects(session, teacherID, callback, asyncState);
        }
        
        private object[] OnEndGetTeacherPracticeSubjects(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.SubjectDTO> retVal = this.EndGetTeacherPracticeSubjects(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTeacherPracticeSubjectsCompleted(object state) {
            if ((this.GetTeacherPracticeSubjectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTeacherPracticeSubjectsCompleted(this, new GetTeacherPracticeSubjectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTeacherPracticeSubjectsAsync(StudyingController.SCS.Session session, int teacherID) {
            this.GetTeacherPracticeSubjectsAsync(session, teacherID, null);
        }
        
        public void GetTeacherPracticeSubjectsAsync(StudyingController.SCS.Session session, int teacherID, object userState) {
            if ((this.onBeginGetTeacherPracticeSubjectsDelegate == null)) {
                this.onBeginGetTeacherPracticeSubjectsDelegate = new BeginOperationDelegate(this.OnBeginGetTeacherPracticeSubjects);
            }
            if ((this.onEndGetTeacherPracticeSubjectsDelegate == null)) {
                this.onEndGetTeacherPracticeSubjectsDelegate = new EndOperationDelegate(this.OnEndGetTeacherPracticeSubjects);
            }
            if ((this.onGetTeacherPracticeSubjectsCompletedDelegate == null)) {
                this.onGetTeacherPracticeSubjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTeacherPracticeSubjectsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTeacherPracticeSubjectsDelegate, new object[] {
                        session,
                        teacherID}, this.onEndGetTeacherPracticeSubjectsDelegate, this.onGetTeacherPracticeSubjectsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetAllStudents(StudyingController.SCS.Session session) {
            return base.Channel.GetAllStudents(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllStudents(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllStudents(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetAllStudents(System.IAsyncResult result) {
            return base.Channel.EndGetAllStudents(result);
        }
        
        private System.IAsyncResult OnBeginGetAllStudents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetAllStudents(session, callback, asyncState);
        }
        
        private object[] OnEndGetAllStudents(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.StudentDTO> retVal = this.EndGetAllStudents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllStudentsCompleted(object state) {
            if ((this.GetAllStudentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllStudentsCompleted(this, new GetAllStudentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllStudentsAsync(StudyingController.SCS.Session session) {
            this.GetAllStudentsAsync(session, null);
        }
        
        public void GetAllStudentsAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetAllStudentsDelegate == null)) {
                this.onBeginGetAllStudentsDelegate = new BeginOperationDelegate(this.OnBeginGetAllStudents);
            }
            if ((this.onEndGetAllStudentsDelegate == null)) {
                this.onEndGetAllStudentsDelegate = new EndOperationDelegate(this.OnEndGetAllStudents);
            }
            if ((this.onGetAllStudentsCompletedDelegate == null)) {
                this.onGetAllStudentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllStudentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllStudentsDelegate, new object[] {
                        session}, this.onEndGetAllStudentsDelegate, this.onGetAllStudentsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetGroupStudents(StudyingController.SCS.Session session, int groupID) {
            return base.Channel.GetGroupStudents(session, groupID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupStudents(StudyingController.SCS.Session session, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupStudents(session, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetGroupStudents(System.IAsyncResult result) {
            return base.Channel.EndGetGroupStudents(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupStudents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return this.BeginGetGroupStudents(session, groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupStudents(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.StudentDTO> retVal = this.EndGetGroupStudents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupStudentsCompleted(object state) {
            if ((this.GetGroupStudentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupStudentsCompleted(this, new GetGroupStudentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupStudentsAsync(StudyingController.SCS.Session session, int groupID) {
            this.GetGroupStudentsAsync(session, groupID, null);
        }
        
        public void GetGroupStudentsAsync(StudyingController.SCS.Session session, int groupID, object userState) {
            if ((this.onBeginGetGroupStudentsDelegate == null)) {
                this.onBeginGetGroupStudentsDelegate = new BeginOperationDelegate(this.OnBeginGetGroupStudents);
            }
            if ((this.onEndGetGroupStudentsDelegate == null)) {
                this.onEndGetGroupStudentsDelegate = new EndOperationDelegate(this.OnEndGetGroupStudents);
            }
            if ((this.onGetGroupStudentsCompletedDelegate == null)) {
                this.onGetGroupStudentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupStudentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupStudentsDelegate, new object[] {
                        session,
                        groupID}, this.onEndGetGroupStudentsDelegate, this.onGetGroupStudentsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetCathedraStudents(StudyingController.SCS.Session session, int cathedraID) {
            return base.Channel.GetCathedraStudents(session, cathedraID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCathedraStudents(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCathedraStudents(session, cathedraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetCathedraStudents(System.IAsyncResult result) {
            return base.Channel.EndGetCathedraStudents(result);
        }
        
        private System.IAsyncResult OnBeginGetCathedraStudents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int cathedraID = ((int)(inValues[1]));
            return this.BeginGetCathedraStudents(session, cathedraID, callback, asyncState);
        }
        
        private object[] OnEndGetCathedraStudents(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.StudentDTO> retVal = this.EndGetCathedraStudents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCathedraStudentsCompleted(object state) {
            if ((this.GetCathedraStudentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCathedraStudentsCompleted(this, new GetCathedraStudentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCathedraStudentsAsync(StudyingController.SCS.Session session, int cathedraID) {
            this.GetCathedraStudentsAsync(session, cathedraID, null);
        }
        
        public void GetCathedraStudentsAsync(StudyingController.SCS.Session session, int cathedraID, object userState) {
            if ((this.onBeginGetCathedraStudentsDelegate == null)) {
                this.onBeginGetCathedraStudentsDelegate = new BeginOperationDelegate(this.OnBeginGetCathedraStudents);
            }
            if ((this.onEndGetCathedraStudentsDelegate == null)) {
                this.onEndGetCathedraStudentsDelegate = new EndOperationDelegate(this.OnEndGetCathedraStudents);
            }
            if ((this.onGetCathedraStudentsCompletedDelegate == null)) {
                this.onGetCathedraStudentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCathedraStudentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCathedraStudentsDelegate, new object[] {
                        session,
                        cathedraID}, this.onEndGetCathedraStudentsDelegate, this.onGetCathedraStudentsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetFacultyStudents(StudyingController.SCS.Session session, int facultyID) {
            return base.Channel.GetFacultyStudents(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFacultyStudents(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacultyStudents(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetFacultyStudents(System.IAsyncResult result) {
            return base.Channel.EndGetFacultyStudents(result);
        }
        
        private System.IAsyncResult OnBeginGetFacultyStudents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginGetFacultyStudents(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndGetFacultyStudents(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.StudentDTO> retVal = this.EndGetFacultyStudents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacultyStudentsCompleted(object state) {
            if ((this.GetFacultyStudentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacultyStudentsCompleted(this, new GetFacultyStudentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacultyStudentsAsync(StudyingController.SCS.Session session, int facultyID) {
            this.GetFacultyStudentsAsync(session, facultyID, null);
        }
        
        public void GetFacultyStudentsAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginGetFacultyStudentsDelegate == null)) {
                this.onBeginGetFacultyStudentsDelegate = new BeginOperationDelegate(this.OnBeginGetFacultyStudents);
            }
            if ((this.onEndGetFacultyStudentsDelegate == null)) {
                this.onEndGetFacultyStudentsDelegate = new EndOperationDelegate(this.OnEndGetFacultyStudents);
            }
            if ((this.onGetFacultyStudentsCompletedDelegate == null)) {
                this.onGetFacultyStudentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacultyStudentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacultyStudentsDelegate, new object[] {
                        session,
                        facultyID}, this.onEndGetFacultyStudentsDelegate, this.onGetFacultyStudentsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> GetInstituteStudents(StudyingController.SCS.Session session, int instituteID) {
            return base.Channel.GetInstituteStudents(session, instituteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInstituteStudents(StudyingController.SCS.Session session, int instituteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInstituteStudents(session, instituteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.StudentDTO> EndGetInstituteStudents(System.IAsyncResult result) {
            return base.Channel.EndGetInstituteStudents(result);
        }
        
        private System.IAsyncResult OnBeginGetInstituteStudents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int instituteID = ((int)(inValues[1]));
            return this.BeginGetInstituteStudents(session, instituteID, callback, asyncState);
        }
        
        private object[] OnEndGetInstituteStudents(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.StudentDTO> retVal = this.EndGetInstituteStudents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInstituteStudentsCompleted(object state) {
            if ((this.GetInstituteStudentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInstituteStudentsCompleted(this, new GetInstituteStudentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInstituteStudentsAsync(StudyingController.SCS.Session session, int instituteID) {
            this.GetInstituteStudentsAsync(session, instituteID, null);
        }
        
        public void GetInstituteStudentsAsync(StudyingController.SCS.Session session, int instituteID, object userState) {
            if ((this.onBeginGetInstituteStudentsDelegate == null)) {
                this.onBeginGetInstituteStudentsDelegate = new BeginOperationDelegate(this.OnBeginGetInstituteStudents);
            }
            if ((this.onEndGetInstituteStudentsDelegate == null)) {
                this.onEndGetInstituteStudentsDelegate = new EndOperationDelegate(this.OnEndGetInstituteStudents);
            }
            if ((this.onGetInstituteStudentsCompletedDelegate == null)) {
                this.onGetInstituteStudentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInstituteStudentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetInstituteStudentsDelegate, new object[] {
                        session,
                        instituteID}, this.onEndGetInstituteStudentsDelegate, this.onGetInstituteStudentsCompletedDelegate, userState);
        }
        
        public void SavePracticeTeacher(StudyingController.SCS.Session session, EntitiesDTO.PracticeTeacherDTO practiceTeacher) {
            base.Channel.SavePracticeTeacher(session, practiceTeacher);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSavePracticeTeacher(StudyingController.SCS.Session session, EntitiesDTO.PracticeTeacherDTO practiceTeacher, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSavePracticeTeacher(session, practiceTeacher, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSavePracticeTeacher(System.IAsyncResult result) {
            base.Channel.EndSavePracticeTeacher(result);
        }
        
        private System.IAsyncResult OnBeginSavePracticeTeacher(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.PracticeTeacherDTO practiceTeacher = ((EntitiesDTO.PracticeTeacherDTO)(inValues[1]));
            return this.BeginSavePracticeTeacher(session, practiceTeacher, callback, asyncState);
        }
        
        private object[] OnEndSavePracticeTeacher(System.IAsyncResult result) {
            this.EndSavePracticeTeacher(result);
            return null;
        }
        
        private void OnSavePracticeTeacherCompleted(object state) {
            if ((this.SavePracticeTeacherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SavePracticeTeacherCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SavePracticeTeacherAsync(StudyingController.SCS.Session session, EntitiesDTO.PracticeTeacherDTO practiceTeacher) {
            this.SavePracticeTeacherAsync(session, practiceTeacher, null);
        }
        
        public void SavePracticeTeacherAsync(StudyingController.SCS.Session session, EntitiesDTO.PracticeTeacherDTO practiceTeacher, object userState) {
            if ((this.onBeginSavePracticeTeacherDelegate == null)) {
                this.onBeginSavePracticeTeacherDelegate = new BeginOperationDelegate(this.OnBeginSavePracticeTeacher);
            }
            if ((this.onEndSavePracticeTeacherDelegate == null)) {
                this.onEndSavePracticeTeacherDelegate = new EndOperationDelegate(this.OnEndSavePracticeTeacher);
            }
            if ((this.onSavePracticeTeacherCompletedDelegate == null)) {
                this.onSavePracticeTeacherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSavePracticeTeacherCompleted);
            }
            base.InvokeAsync(this.onBeginSavePracticeTeacherDelegate, new object[] {
                        session,
                        practiceTeacher}, this.onEndSavePracticeTeacherDelegate, this.onSavePracticeTeacherCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetFacultyGroups(StudyingController.SCS.Session session, int facultyID) {
            return base.Channel.GetFacultyGroups(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFacultyGroups(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacultyGroups(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetFacultyGroups(System.IAsyncResult result) {
            return base.Channel.EndGetFacultyGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetFacultyGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginGetFacultyGroups(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndGetFacultyGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.GroupDTO> retVal = this.EndGetFacultyGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacultyGroupsCompleted(object state) {
            if ((this.GetFacultyGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacultyGroupsCompleted(this, new GetFacultyGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacultyGroupsAsync(StudyingController.SCS.Session session, int facultyID) {
            this.GetFacultyGroupsAsync(session, facultyID, null);
        }
        
        public void GetFacultyGroupsAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginGetFacultyGroupsDelegate == null)) {
                this.onBeginGetFacultyGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetFacultyGroups);
            }
            if ((this.onEndGetFacultyGroupsDelegate == null)) {
                this.onEndGetFacultyGroupsDelegate = new EndOperationDelegate(this.OnEndGetFacultyGroups);
            }
            if ((this.onGetFacultyGroupsCompletedDelegate == null)) {
                this.onGetFacultyGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacultyGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacultyGroupsDelegate, new object[] {
                        session,
                        facultyID}, this.onEndGetFacultyGroupsDelegate, this.onGetFacultyGroupsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetInstituteGroups(StudyingController.SCS.Session session, int instituteID) {
            return base.Channel.GetInstituteGroups(session, instituteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInstituteGroups(StudyingController.SCS.Session session, int instituteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInstituteGroups(session, instituteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetInstituteGroups(System.IAsyncResult result) {
            return base.Channel.EndGetInstituteGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetInstituteGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int instituteID = ((int)(inValues[1]));
            return this.BeginGetInstituteGroups(session, instituteID, callback, asyncState);
        }
        
        private object[] OnEndGetInstituteGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.GroupDTO> retVal = this.EndGetInstituteGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInstituteGroupsCompleted(object state) {
            if ((this.GetInstituteGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInstituteGroupsCompleted(this, new GetInstituteGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInstituteGroupsAsync(StudyingController.SCS.Session session, int instituteID) {
            this.GetInstituteGroupsAsync(session, instituteID, null);
        }
        
        public void GetInstituteGroupsAsync(StudyingController.SCS.Session session, int instituteID, object userState) {
            if ((this.onBeginGetInstituteGroupsDelegate == null)) {
                this.onBeginGetInstituteGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetInstituteGroups);
            }
            if ((this.onEndGetInstituteGroupsDelegate == null)) {
                this.onEndGetInstituteGroupsDelegate = new EndOperationDelegate(this.OnEndGetInstituteGroups);
            }
            if ((this.onGetInstituteGroupsCompletedDelegate == null)) {
                this.onGetInstituteGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInstituteGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetInstituteGroupsDelegate, new object[] {
                        session,
                        instituteID}, this.onEndGetInstituteGroupsDelegate, this.onGetInstituteGroupsCompletedDelegate, userState);
        }
        
        public void SavePracticeTeacherSubjects(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects) {
            base.Channel.SavePracticeTeacherSubjects(session, teacherID, subjects);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSavePracticeTeacherSubjects(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSavePracticeTeacherSubjects(session, teacherID, subjects, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSavePracticeTeacherSubjects(System.IAsyncResult result) {
            base.Channel.EndSavePracticeTeacherSubjects(result);
        }
        
        private System.IAsyncResult OnBeginSavePracticeTeacherSubjects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int teacherID = ((int)(inValues[1]));
            System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects = ((System.Collections.Generic.List<EntitiesDTO.SubjectDTO>)(inValues[2]));
            return this.BeginSavePracticeTeacherSubjects(session, teacherID, subjects, callback, asyncState);
        }
        
        private object[] OnEndSavePracticeTeacherSubjects(System.IAsyncResult result) {
            this.EndSavePracticeTeacherSubjects(result);
            return null;
        }
        
        private void OnSavePracticeTeacherSubjectsCompleted(object state) {
            if ((this.SavePracticeTeacherSubjectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SavePracticeTeacherSubjectsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SavePracticeTeacherSubjectsAsync(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects) {
            this.SavePracticeTeacherSubjectsAsync(session, teacherID, subjects, null);
        }
        
        public void SavePracticeTeacherSubjectsAsync(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects, object userState) {
            if ((this.onBeginSavePracticeTeacherSubjectsDelegate == null)) {
                this.onBeginSavePracticeTeacherSubjectsDelegate = new BeginOperationDelegate(this.OnBeginSavePracticeTeacherSubjects);
            }
            if ((this.onEndSavePracticeTeacherSubjectsDelegate == null)) {
                this.onEndSavePracticeTeacherSubjectsDelegate = new EndOperationDelegate(this.OnEndSavePracticeTeacherSubjects);
            }
            if ((this.onSavePracticeTeacherSubjectsCompletedDelegate == null)) {
                this.onSavePracticeTeacherSubjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSavePracticeTeacherSubjectsCompleted);
            }
            base.InvokeAsync(this.onBeginSavePracticeTeacherSubjectsDelegate, new object[] {
                        session,
                        teacherID,
                        subjects}, this.onEndSavePracticeTeacherSubjectsDelegate, this.onSavePracticeTeacherSubjectsCompletedDelegate, userState);
        }
        
        public EntitiesDTO.TeacherDTO GetTeacher(StudyingController.SCS.Session session, int teacherID) {
            return base.Channel.GetTeacher(session, teacherID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTeacher(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTeacher(session, teacherID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EntitiesDTO.TeacherDTO EndGetTeacher(System.IAsyncResult result) {
            return base.Channel.EndGetTeacher(result);
        }
        
        private System.IAsyncResult OnBeginGetTeacher(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int teacherID = ((int)(inValues[1]));
            return this.BeginGetTeacher(session, teacherID, callback, asyncState);
        }
        
        private object[] OnEndGetTeacher(System.IAsyncResult result) {
            EntitiesDTO.TeacherDTO retVal = this.EndGetTeacher(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTeacherCompleted(object state) {
            if ((this.GetTeacherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTeacherCompleted(this, new GetTeacherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTeacherAsync(StudyingController.SCS.Session session, int teacherID) {
            this.GetTeacherAsync(session, teacherID, null);
        }
        
        public void GetTeacherAsync(StudyingController.SCS.Session session, int teacherID, object userState) {
            if ((this.onBeginGetTeacherDelegate == null)) {
                this.onBeginGetTeacherDelegate = new BeginOperationDelegate(this.OnBeginGetTeacher);
            }
            if ((this.onEndGetTeacherDelegate == null)) {
                this.onEndGetTeacherDelegate = new EndOperationDelegate(this.OnEndGetTeacher);
            }
            if ((this.onGetTeacherCompletedDelegate == null)) {
                this.onGetTeacherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTeacherCompleted);
            }
            base.InvokeAsync(this.onBeginGetTeacherDelegate, new object[] {
                        session,
                        teacherID}, this.onEndGetTeacherDelegate, this.onGetTeacherCompletedDelegate, userState);
        }
        
        public EntitiesDTO.InstituteDTO GetInstituteByID(StudyingController.SCS.Session session, System.Nullable<int> instituteID) {
            return base.Channel.GetInstituteByID(session, instituteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInstituteByID(StudyingController.SCS.Session session, System.Nullable<int> instituteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInstituteByID(session, instituteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EntitiesDTO.InstituteDTO EndGetInstituteByID(System.IAsyncResult result) {
            return base.Channel.EndGetInstituteByID(result);
        }
        
        private System.IAsyncResult OnBeginGetInstituteByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            System.Nullable<int> instituteID = ((System.Nullable<int>)(inValues[1]));
            return this.BeginGetInstituteByID(session, instituteID, callback, asyncState);
        }
        
        private object[] OnEndGetInstituteByID(System.IAsyncResult result) {
            EntitiesDTO.InstituteDTO retVal = this.EndGetInstituteByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInstituteByIDCompleted(object state) {
            if ((this.GetInstituteByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInstituteByIDCompleted(this, new GetInstituteByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInstituteByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> instituteID) {
            this.GetInstituteByIDAsync(session, instituteID, null);
        }
        
        public void GetInstituteByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> instituteID, object userState) {
            if ((this.onBeginGetInstituteByIDDelegate == null)) {
                this.onBeginGetInstituteByIDDelegate = new BeginOperationDelegate(this.OnBeginGetInstituteByID);
            }
            if ((this.onEndGetInstituteByIDDelegate == null)) {
                this.onEndGetInstituteByIDDelegate = new EndOperationDelegate(this.OnEndGetInstituteByID);
            }
            if ((this.onGetInstituteByIDCompletedDelegate == null)) {
                this.onGetInstituteByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInstituteByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetInstituteByIDDelegate, new object[] {
                        session,
                        instituteID}, this.onEndGetInstituteByIDDelegate, this.onGetInstituteByIDCompletedDelegate, userState);
        }
        
        public EntitiesDTO.FacultyDTO GetFacultyByID(StudyingController.SCS.Session session, int facultyID) {
            return base.Channel.GetFacultyByID(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFacultyByID(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacultyByID(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EntitiesDTO.FacultyDTO EndGetFacultyByID(System.IAsyncResult result) {
            return base.Channel.EndGetFacultyByID(result);
        }
        
        private System.IAsyncResult OnBeginGetFacultyByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginGetFacultyByID(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndGetFacultyByID(System.IAsyncResult result) {
            EntitiesDTO.FacultyDTO retVal = this.EndGetFacultyByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacultyByIDCompleted(object state) {
            if ((this.GetFacultyByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacultyByIDCompleted(this, new GetFacultyByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacultyByIDAsync(StudyingController.SCS.Session session, int facultyID) {
            this.GetFacultyByIDAsync(session, facultyID, null);
        }
        
        public void GetFacultyByIDAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginGetFacultyByIDDelegate == null)) {
                this.onBeginGetFacultyByIDDelegate = new BeginOperationDelegate(this.OnBeginGetFacultyByID);
            }
            if ((this.onEndGetFacultyByIDDelegate == null)) {
                this.onEndGetFacultyByIDDelegate = new EndOperationDelegate(this.OnEndGetFacultyByID);
            }
            if ((this.onGetFacultyByIDCompletedDelegate == null)) {
                this.onGetFacultyByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacultyByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacultyByIDDelegate, new object[] {
                        session,
                        facultyID}, this.onEndGetFacultyByIDDelegate, this.onGetFacultyByIDCompletedDelegate, userState);
        }
        
        public EntitiesDTO.CathedraDTO GetCathedraByID(StudyingController.SCS.Session session, int cathedraID) {
            return base.Channel.GetCathedraByID(session, cathedraID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCathedraByID(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCathedraByID(session, cathedraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EntitiesDTO.CathedraDTO EndGetCathedraByID(System.IAsyncResult result) {
            return base.Channel.EndGetCathedraByID(result);
        }
        
        private System.IAsyncResult OnBeginGetCathedraByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int cathedraID = ((int)(inValues[1]));
            return this.BeginGetCathedraByID(session, cathedraID, callback, asyncState);
        }
        
        private object[] OnEndGetCathedraByID(System.IAsyncResult result) {
            EntitiesDTO.CathedraDTO retVal = this.EndGetCathedraByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCathedraByIDCompleted(object state) {
            if ((this.GetCathedraByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCathedraByIDCompleted(this, new GetCathedraByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCathedraByIDAsync(StudyingController.SCS.Session session, int cathedraID) {
            this.GetCathedraByIDAsync(session, cathedraID, null);
        }
        
        public void GetCathedraByIDAsync(StudyingController.SCS.Session session, int cathedraID, object userState) {
            if ((this.onBeginGetCathedraByIDDelegate == null)) {
                this.onBeginGetCathedraByIDDelegate = new BeginOperationDelegate(this.OnBeginGetCathedraByID);
            }
            if ((this.onEndGetCathedraByIDDelegate == null)) {
                this.onEndGetCathedraByIDDelegate = new EndOperationDelegate(this.OnEndGetCathedraByID);
            }
            if ((this.onGetCathedraByIDCompletedDelegate == null)) {
                this.onGetCathedraByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCathedraByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetCathedraByIDDelegate, new object[] {
                        session,
                        cathedraID}, this.onEndGetCathedraByIDDelegate, this.onGetCathedraByIDCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.ControlDTO> GetLectureControls(StudyingController.SCS.Session session, int lectureID) {
            return base.Channel.GetLectureControls(session, lectureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLectureControls(StudyingController.SCS.Session session, int lectureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLectureControls(session, lectureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.ControlDTO> EndGetLectureControls(System.IAsyncResult result) {
            return base.Channel.EndGetLectureControls(result);
        }
        
        private System.IAsyncResult OnBeginGetLectureControls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int lectureID = ((int)(inValues[1]));
            return this.BeginGetLectureControls(session, lectureID, callback, asyncState);
        }
        
        private object[] OnEndGetLectureControls(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.ControlDTO> retVal = this.EndGetLectureControls(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLectureControlsCompleted(object state) {
            if ((this.GetLectureControlsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLectureControlsCompleted(this, new GetLectureControlsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLectureControlsAsync(StudyingController.SCS.Session session, int lectureID) {
            this.GetLectureControlsAsync(session, lectureID, null);
        }
        
        public void GetLectureControlsAsync(StudyingController.SCS.Session session, int lectureID, object userState) {
            if ((this.onBeginGetLectureControlsDelegate == null)) {
                this.onBeginGetLectureControlsDelegate = new BeginOperationDelegate(this.OnBeginGetLectureControls);
            }
            if ((this.onEndGetLectureControlsDelegate == null)) {
                this.onEndGetLectureControlsDelegate = new EndOperationDelegate(this.OnEndGetLectureControls);
            }
            if ((this.onGetLectureControlsCompletedDelegate == null)) {
                this.onGetLectureControlsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLectureControlsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLectureControlsDelegate, new object[] {
                        session,
                        lectureID}, this.onEndGetLectureControlsDelegate, this.onGetLectureControlsCompletedDelegate, userState);
        }
        
        public void SaveLectureControls(StudyingController.SCS.Session session, int lectureID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls) {
            base.Channel.SaveLectureControls(session, lectureID, controls);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveLectureControls(StudyingController.SCS.Session session, int lectureID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveLectureControls(session, lectureID, controls, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveLectureControls(System.IAsyncResult result) {
            base.Channel.EndSaveLectureControls(result);
        }
        
        private System.IAsyncResult OnBeginSaveLectureControls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int lectureID = ((int)(inValues[1]));
            System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls = ((System.Collections.Generic.List<EntitiesDTO.ControlDTO>)(inValues[2]));
            return this.BeginSaveLectureControls(session, lectureID, controls, callback, asyncState);
        }
        
        private object[] OnEndSaveLectureControls(System.IAsyncResult result) {
            this.EndSaveLectureControls(result);
            return null;
        }
        
        private void OnSaveLectureControlsCompleted(object state) {
            if ((this.SaveLectureControlsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveLectureControlsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveLectureControlsAsync(StudyingController.SCS.Session session, int lectureID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls) {
            this.SaveLectureControlsAsync(session, lectureID, controls, null);
        }
        
        public void SaveLectureControlsAsync(StudyingController.SCS.Session session, int lectureID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls, object userState) {
            if ((this.onBeginSaveLectureControlsDelegate == null)) {
                this.onBeginSaveLectureControlsDelegate = new BeginOperationDelegate(this.OnBeginSaveLectureControls);
            }
            if ((this.onEndSaveLectureControlsDelegate == null)) {
                this.onEndSaveLectureControlsDelegate = new EndOperationDelegate(this.OnEndSaveLectureControls);
            }
            if ((this.onSaveLectureControlsCompletedDelegate == null)) {
                this.onSaveLectureControlsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveLectureControlsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveLectureControlsDelegate, new object[] {
                        session,
                        lectureID,
                        controls}, this.onEndSaveLectureControlsDelegate, this.onSaveLectureControlsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.ControlDTO> GetPracticeControls(StudyingController.SCS.Session session, int practiceID) {
            return base.Channel.GetPracticeControls(session, practiceID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPracticeControls(StudyingController.SCS.Session session, int practiceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPracticeControls(session, practiceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.ControlDTO> EndGetPracticeControls(System.IAsyncResult result) {
            return base.Channel.EndGetPracticeControls(result);
        }
        
        private System.IAsyncResult OnBeginGetPracticeControls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int practiceID = ((int)(inValues[1]));
            return this.BeginGetPracticeControls(session, practiceID, callback, asyncState);
        }
        
        private object[] OnEndGetPracticeControls(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.ControlDTO> retVal = this.EndGetPracticeControls(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPracticeControlsCompleted(object state) {
            if ((this.GetPracticeControlsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPracticeControlsCompleted(this, new GetPracticeControlsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPracticeControlsAsync(StudyingController.SCS.Session session, int practiceID) {
            this.GetPracticeControlsAsync(session, practiceID, null);
        }
        
        public void GetPracticeControlsAsync(StudyingController.SCS.Session session, int practiceID, object userState) {
            if ((this.onBeginGetPracticeControlsDelegate == null)) {
                this.onBeginGetPracticeControlsDelegate = new BeginOperationDelegate(this.OnBeginGetPracticeControls);
            }
            if ((this.onEndGetPracticeControlsDelegate == null)) {
                this.onEndGetPracticeControlsDelegate = new EndOperationDelegate(this.OnEndGetPracticeControls);
            }
            if ((this.onGetPracticeControlsCompletedDelegate == null)) {
                this.onGetPracticeControlsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPracticeControlsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPracticeControlsDelegate, new object[] {
                        session,
                        practiceID}, this.onEndGetPracticeControlsDelegate, this.onGetPracticeControlsCompletedDelegate, userState);
        }
        
        public void SavePracticeControls(StudyingController.SCS.Session session, int practiceID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls) {
            base.Channel.SavePracticeControls(session, practiceID, controls);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSavePracticeControls(StudyingController.SCS.Session session, int practiceID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSavePracticeControls(session, practiceID, controls, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSavePracticeControls(System.IAsyncResult result) {
            base.Channel.EndSavePracticeControls(result);
        }
        
        private System.IAsyncResult OnBeginSavePracticeControls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int practiceID = ((int)(inValues[1]));
            System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls = ((System.Collections.Generic.List<EntitiesDTO.ControlDTO>)(inValues[2]));
            return this.BeginSavePracticeControls(session, practiceID, controls, callback, asyncState);
        }
        
        private object[] OnEndSavePracticeControls(System.IAsyncResult result) {
            this.EndSavePracticeControls(result);
            return null;
        }
        
        private void OnSavePracticeControlsCompleted(object state) {
            if ((this.SavePracticeControlsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SavePracticeControlsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SavePracticeControlsAsync(StudyingController.SCS.Session session, int practiceID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls) {
            this.SavePracticeControlsAsync(session, practiceID, controls, null);
        }
        
        public void SavePracticeControlsAsync(StudyingController.SCS.Session session, int practiceID, System.Collections.Generic.List<EntitiesDTO.ControlDTO> controls, object userState) {
            if ((this.onBeginSavePracticeControlsDelegate == null)) {
                this.onBeginSavePracticeControlsDelegate = new BeginOperationDelegate(this.OnBeginSavePracticeControls);
            }
            if ((this.onEndSavePracticeControlsDelegate == null)) {
                this.onEndSavePracticeControlsDelegate = new EndOperationDelegate(this.OnEndSavePracticeControls);
            }
            if ((this.onSavePracticeControlsCompletedDelegate == null)) {
                this.onSavePracticeControlsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSavePracticeControlsCompleted);
            }
            base.InvokeAsync(this.onBeginSavePracticeControlsDelegate, new object[] {
                        session,
                        practiceID,
                        controls}, this.onEndSavePracticeControlsDelegate, this.onSavePracticeControlsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.ControlMessageDTO> GetControlMessages(StudyingController.SCS.Session session, int controlID) {
            return base.Channel.GetControlMessages(session, controlID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetControlMessages(StudyingController.SCS.Session session, int controlID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetControlMessages(session, controlID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.ControlMessageDTO> EndGetControlMessages(System.IAsyncResult result) {
            return base.Channel.EndGetControlMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetControlMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int controlID = ((int)(inValues[1]));
            return this.BeginGetControlMessages(session, controlID, callback, asyncState);
        }
        
        private object[] OnEndGetControlMessages(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.ControlMessageDTO> retVal = this.EndGetControlMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetControlMessagesCompleted(object state) {
            if ((this.GetControlMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetControlMessagesCompleted(this, new GetControlMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetControlMessagesAsync(StudyingController.SCS.Session session, int controlID) {
            this.GetControlMessagesAsync(session, controlID, null);
        }
        
        public void GetControlMessagesAsync(StudyingController.SCS.Session session, int controlID, object userState) {
            if ((this.onBeginGetControlMessagesDelegate == null)) {
                this.onBeginGetControlMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetControlMessages);
            }
            if ((this.onEndGetControlMessagesDelegate == null)) {
                this.onEndGetControlMessagesDelegate = new EndOperationDelegate(this.OnEndGetControlMessages);
            }
            if ((this.onGetControlMessagesCompletedDelegate == null)) {
                this.onGetControlMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetControlMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetControlMessagesDelegate, new object[] {
                        session,
                        controlID}, this.onEndGetControlMessagesDelegate, this.onGetControlMessagesCompletedDelegate, userState);
        }
        
        public void SaveControlMessage(StudyingController.SCS.Session session, EntitiesDTO.ControlMessageDTO message) {
            base.Channel.SaveControlMessage(session, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveControlMessage(StudyingController.SCS.Session session, EntitiesDTO.ControlMessageDTO message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveControlMessage(session, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveControlMessage(System.IAsyncResult result) {
            base.Channel.EndSaveControlMessage(result);
        }
        
        private System.IAsyncResult OnBeginSaveControlMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.ControlMessageDTO message = ((EntitiesDTO.ControlMessageDTO)(inValues[1]));
            return this.BeginSaveControlMessage(session, message, callback, asyncState);
        }
        
        private object[] OnEndSaveControlMessage(System.IAsyncResult result) {
            this.EndSaveControlMessage(result);
            return null;
        }
        
        private void OnSaveControlMessageCompleted(object state) {
            if ((this.SaveControlMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveControlMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveControlMessageAsync(StudyingController.SCS.Session session, EntitiesDTO.ControlMessageDTO message) {
            this.SaveControlMessageAsync(session, message, null);
        }
        
        public void SaveControlMessageAsync(StudyingController.SCS.Session session, EntitiesDTO.ControlMessageDTO message, object userState) {
            if ((this.onBeginSaveControlMessageDelegate == null)) {
                this.onBeginSaveControlMessageDelegate = new BeginOperationDelegate(this.OnBeginSaveControlMessage);
            }
            if ((this.onEndSaveControlMessageDelegate == null)) {
                this.onEndSaveControlMessageDelegate = new EndOperationDelegate(this.OnEndSaveControlMessage);
            }
            if ((this.onSaveControlMessageCompletedDelegate == null)) {
                this.onSaveControlMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveControlMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSaveControlMessageDelegate, new object[] {
                        session,
                        message}, this.onEndSaveControlMessageDelegate, this.onSaveControlMessageCompletedDelegate, userState);
        }
        
        public void SaveLectureControl(StudyingController.SCS.Session session, EntitiesDTO.ControlDTO control, int lectureID) {
            base.Channel.SaveLectureControl(session, control, lectureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveLectureControl(StudyingController.SCS.Session session, EntitiesDTO.ControlDTO control, int lectureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveLectureControl(session, control, lectureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveLectureControl(System.IAsyncResult result) {
            base.Channel.EndSaveLectureControl(result);
        }
        
        private System.IAsyncResult OnBeginSaveLectureControl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.ControlDTO control = ((EntitiesDTO.ControlDTO)(inValues[1]));
            int lectureID = ((int)(inValues[2]));
            return this.BeginSaveLectureControl(session, control, lectureID, callback, asyncState);
        }
        
        private object[] OnEndSaveLectureControl(System.IAsyncResult result) {
            this.EndSaveLectureControl(result);
            return null;
        }
        
        private void OnSaveLectureControlCompleted(object state) {
            if ((this.SaveLectureControlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveLectureControlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveLectureControlAsync(StudyingController.SCS.Session session, EntitiesDTO.ControlDTO control, int lectureID) {
            this.SaveLectureControlAsync(session, control, lectureID, null);
        }
        
        public void SaveLectureControlAsync(StudyingController.SCS.Session session, EntitiesDTO.ControlDTO control, int lectureID, object userState) {
            if ((this.onBeginSaveLectureControlDelegate == null)) {
                this.onBeginSaveLectureControlDelegate = new BeginOperationDelegate(this.OnBeginSaveLectureControl);
            }
            if ((this.onEndSaveLectureControlDelegate == null)) {
                this.onEndSaveLectureControlDelegate = new EndOperationDelegate(this.OnEndSaveLectureControl);
            }
            if ((this.onSaveLectureControlCompletedDelegate == null)) {
                this.onSaveLectureControlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveLectureControlCompleted);
            }
            base.InvokeAsync(this.onBeginSaveLectureControlDelegate, new object[] {
                        session,
                        control,
                        lectureID}, this.onEndSaveLectureControlDelegate, this.onSaveLectureControlCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> GetStudentLectures(StudyingController.SCS.Session session, int studentID) {
            return base.Channel.GetStudentLectures(session, studentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStudentLectures(StudyingController.SCS.Session session, int studentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStudentLectures(session, studentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> EndGetStudentLectures(System.IAsyncResult result) {
            return base.Channel.EndGetStudentLectures(result);
        }
        
        private System.IAsyncResult OnBeginGetStudentLectures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int studentID = ((int)(inValues[1]));
            return this.BeginGetStudentLectures(session, studentID, callback, asyncState);
        }
        
        private object[] OnEndGetStudentLectures(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.LectureDTO> retVal = this.EndGetStudentLectures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStudentLecturesCompleted(object state) {
            if ((this.GetStudentLecturesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStudentLecturesCompleted(this, new GetStudentLecturesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStudentLecturesAsync(StudyingController.SCS.Session session, int studentID) {
            this.GetStudentLecturesAsync(session, studentID, null);
        }
        
        public void GetStudentLecturesAsync(StudyingController.SCS.Session session, int studentID, object userState) {
            if ((this.onBeginGetStudentLecturesDelegate == null)) {
                this.onBeginGetStudentLecturesDelegate = new BeginOperationDelegate(this.OnBeginGetStudentLectures);
            }
            if ((this.onEndGetStudentLecturesDelegate == null)) {
                this.onEndGetStudentLecturesDelegate = new EndOperationDelegate(this.OnEndGetStudentLectures);
            }
            if ((this.onGetStudentLecturesCompletedDelegate == null)) {
                this.onGetStudentLecturesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStudentLecturesCompleted);
            }
            base.InvokeAsync(this.onBeginGetStudentLecturesDelegate, new object[] {
                        session,
                        studentID}, this.onEndGetStudentLecturesDelegate, this.onGetStudentLecturesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> GetAttachments(StudyingController.SCS.Session session, int teacherID) {
            return base.Channel.GetAttachments(session, teacherID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAttachments(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAttachments(session, teacherID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> EndGetAttachments(System.IAsyncResult result) {
            return base.Channel.EndGetAttachments(result);
        }
        
        private System.IAsyncResult OnBeginGetAttachments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int teacherID = ((int)(inValues[1]));
            return this.BeginGetAttachments(session, teacherID, callback, asyncState);
        }
        
        private object[] OnEndGetAttachments(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> retVal = this.EndGetAttachments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAttachmentsCompleted(object state) {
            if ((this.GetAttachmentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAttachmentsCompleted(this, new GetAttachmentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAttachmentsAsync(StudyingController.SCS.Session session, int teacherID) {
            this.GetAttachmentsAsync(session, teacherID, null);
        }
        
        public void GetAttachmentsAsync(StudyingController.SCS.Session session, int teacherID, object userState) {
            if ((this.onBeginGetAttachmentsDelegate == null)) {
                this.onBeginGetAttachmentsDelegate = new BeginOperationDelegate(this.OnBeginGetAttachments);
            }
            if ((this.onEndGetAttachmentsDelegate == null)) {
                this.onEndGetAttachmentsDelegate = new EndOperationDelegate(this.OnEndGetAttachments);
            }
            if ((this.onGetAttachmentsCompletedDelegate == null)) {
                this.onGetAttachmentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAttachmentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAttachmentsDelegate, new object[] {
                        session,
                        teacherID}, this.onEndGetAttachmentsDelegate, this.onGetAttachmentsCompletedDelegate, userState);
        }
        
        public void SaveAttachments(StudyingController.SCS.Session session, int userID, System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> attachments) {
            base.Channel.SaveAttachments(session, userID, attachments);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveAttachments(StudyingController.SCS.Session session, int userID, System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> attachments, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveAttachments(session, userID, attachments, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveAttachments(System.IAsyncResult result) {
            base.Channel.EndSaveAttachments(result);
        }
        
        private System.IAsyncResult OnBeginSaveAttachments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int userID = ((int)(inValues[1]));
            System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> attachments = ((System.Collections.Generic.List<EntitiesDTO.AttachmentDTO>)(inValues[2]));
            return this.BeginSaveAttachments(session, userID, attachments, callback, asyncState);
        }
        
        private object[] OnEndSaveAttachments(System.IAsyncResult result) {
            this.EndSaveAttachments(result);
            return null;
        }
        
        private void OnSaveAttachmentsCompleted(object state) {
            if ((this.SaveAttachmentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveAttachmentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveAttachmentsAsync(StudyingController.SCS.Session session, int userID, System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> attachments) {
            this.SaveAttachmentsAsync(session, userID, attachments, null);
        }
        
        public void SaveAttachmentsAsync(StudyingController.SCS.Session session, int userID, System.Collections.Generic.List<EntitiesDTO.AttachmentDTO> attachments, object userState) {
            if ((this.onBeginSaveAttachmentsDelegate == null)) {
                this.onBeginSaveAttachmentsDelegate = new BeginOperationDelegate(this.OnBeginSaveAttachments);
            }
            if ((this.onEndSaveAttachmentsDelegate == null)) {
                this.onEndSaveAttachmentsDelegate = new EndOperationDelegate(this.OnEndSaveAttachments);
            }
            if ((this.onSaveAttachmentsCompletedDelegate == null)) {
                this.onSaveAttachmentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveAttachmentsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveAttachmentsDelegate, new object[] {
                        session,
                        userID,
                        attachments}, this.onEndSaveAttachmentsDelegate, this.onSaveAttachmentsCompletedDelegate, userState);
        }
        
        public void DeleteAttachment(StudyingController.SCS.Session session, int attachmentID) {
            base.Channel.DeleteAttachment(session, attachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteAttachment(StudyingController.SCS.Session session, int attachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAttachment(session, attachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteAttachment(System.IAsyncResult result) {
            base.Channel.EndDeleteAttachment(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAttachment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int attachmentID = ((int)(inValues[1]));
            return this.BeginDeleteAttachment(session, attachmentID, callback, asyncState);
        }
        
        private object[] OnEndDeleteAttachment(System.IAsyncResult result) {
            this.EndDeleteAttachment(result);
            return null;
        }
        
        private void OnDeleteAttachmentCompleted(object state) {
            if ((this.DeleteAttachmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAttachmentAsync(StudyingController.SCS.Session session, int attachmentID) {
            this.DeleteAttachmentAsync(session, attachmentID, null);
        }
        
        public void DeleteAttachmentAsync(StudyingController.SCS.Session session, int attachmentID, object userState) {
            if ((this.onBeginDeleteAttachmentDelegate == null)) {
                this.onBeginDeleteAttachmentDelegate = new BeginOperationDelegate(this.OnBeginDeleteAttachment);
            }
            if ((this.onEndDeleteAttachmentDelegate == null)) {
                this.onEndDeleteAttachmentDelegate = new EndOperationDelegate(this.OnEndDeleteAttachment);
            }
            if ((this.onDeleteAttachmentCompletedDelegate == null)) {
                this.onDeleteAttachmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAttachmentCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAttachmentDelegate, new object[] {
                        session,
                        attachmentID}, this.onEndDeleteAttachmentDelegate, this.onDeleteAttachmentCompletedDelegate, userState);
        }
        
        public StudyingController.SCS.Session Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(login, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public StudyingController.SCS.Session EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginLogin(login, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            StudyingController.SCS.Session retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string login, string password) {
            this.LoginAsync(login, password, null);
        }
        
        public void LoginAsync(string login, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        login,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> GetInstitutes(StudyingController.SCS.Session session) {
            return base.Channel.GetInstitutes(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInstitutes(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInstitutes(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.InstituteDTO> EndGetInstitutes(System.IAsyncResult result) {
            return base.Channel.EndGetInstitutes(result);
        }
        
        private System.IAsyncResult OnBeginGetInstitutes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetInstitutes(session, callback, asyncState);
        }
        
        private object[] OnEndGetInstitutes(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.InstituteDTO> retVal = this.EndGetInstitutes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInstitutesCompleted(object state) {
            if ((this.GetInstitutesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInstitutesCompleted(this, new GetInstitutesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInstitutesAsync(StudyingController.SCS.Session session) {
            this.GetInstitutesAsync(session, null);
        }
        
        public void GetInstitutesAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetInstitutesDelegate == null)) {
                this.onBeginGetInstitutesDelegate = new BeginOperationDelegate(this.OnBeginGetInstitutes);
            }
            if ((this.onEndGetInstitutesDelegate == null)) {
                this.onEndGetInstitutesDelegate = new EndOperationDelegate(this.OnEndGetInstitutes);
            }
            if ((this.onGetInstitutesCompletedDelegate == null)) {
                this.onGetInstitutesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInstitutesCompleted);
            }
            base.InvokeAsync(this.onBeginGetInstitutesDelegate, new object[] {
                        session}, this.onEndGetInstitutesDelegate, this.onGetInstitutesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetAllFaculties(StudyingController.SCS.Session session) {
            return base.Channel.GetAllFaculties(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllFaculties(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllFaculties(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetAllFaculties(System.IAsyncResult result) {
            return base.Channel.EndGetAllFaculties(result);
        }
        
        private System.IAsyncResult OnBeginGetAllFaculties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetAllFaculties(session, callback, asyncState);
        }
        
        private object[] OnEndGetAllFaculties(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.FacultyDTO> retVal = this.EndGetAllFaculties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllFacultiesCompleted(object state) {
            if ((this.GetAllFacultiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllFacultiesCompleted(this, new GetAllFacultiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllFacultiesAsync(StudyingController.SCS.Session session) {
            this.GetAllFacultiesAsync(session, null);
        }
        
        public void GetAllFacultiesAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetAllFacultiesDelegate == null)) {
                this.onBeginGetAllFacultiesDelegate = new BeginOperationDelegate(this.OnBeginGetAllFaculties);
            }
            if ((this.onEndGetAllFacultiesDelegate == null)) {
                this.onEndGetAllFacultiesDelegate = new EndOperationDelegate(this.OnEndGetAllFaculties);
            }
            if ((this.onGetAllFacultiesCompletedDelegate == null)) {
                this.onGetAllFacultiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllFacultiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllFacultiesDelegate, new object[] {
                        session}, this.onEndGetAllFacultiesDelegate, this.onGetAllFacultiesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> GetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID) {
            return base.Channel.GetFaculties(session, instituteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFaculties(StudyingController.SCS.Session session, System.Nullable<int> instituteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFaculties(session, instituteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.FacultyDTO> EndGetFaculties(System.IAsyncResult result) {
            return base.Channel.EndGetFaculties(result);
        }
        
        private System.IAsyncResult OnBeginGetFaculties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            System.Nullable<int> instituteID = ((System.Nullable<int>)(inValues[1]));
            return this.BeginGetFaculties(session, instituteID, callback, asyncState);
        }
        
        private object[] OnEndGetFaculties(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.FacultyDTO> retVal = this.EndGetFaculties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacultiesCompleted(object state) {
            if ((this.GetFacultiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacultiesCompleted(this, new GetFacultiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacultiesAsync(StudyingController.SCS.Session session, System.Nullable<int> instituteID) {
            this.GetFacultiesAsync(session, instituteID, null);
        }
        
        public void GetFacultiesAsync(StudyingController.SCS.Session session, System.Nullable<int> instituteID, object userState) {
            if ((this.onBeginGetFacultiesDelegate == null)) {
                this.onBeginGetFacultiesDelegate = new BeginOperationDelegate(this.OnBeginGetFaculties);
            }
            if ((this.onEndGetFacultiesDelegate == null)) {
                this.onEndGetFacultiesDelegate = new EndOperationDelegate(this.OnEndGetFaculties);
            }
            if ((this.onGetFacultiesCompletedDelegate == null)) {
                this.onGetFacultiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacultiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacultiesDelegate, new object[] {
                        session,
                        instituteID}, this.onEndGetFacultiesDelegate, this.onGetFacultiesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetAllCathedras(StudyingController.SCS.Session session) {
            return base.Channel.GetAllCathedras(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllCathedras(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCathedras(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetAllCathedras(System.IAsyncResult result) {
            return base.Channel.EndGetAllCathedras(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCathedras(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetAllCathedras(session, callback, asyncState);
        }
        
        private object[] OnEndGetAllCathedras(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.CathedraDTO> retVal = this.EndGetAllCathedras(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCathedrasCompleted(object state) {
            if ((this.GetAllCathedrasCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCathedrasCompleted(this, new GetAllCathedrasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCathedrasAsync(StudyingController.SCS.Session session) {
            this.GetAllCathedrasAsync(session, null);
        }
        
        public void GetAllCathedrasAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetAllCathedrasDelegate == null)) {
                this.onBeginGetAllCathedrasDelegate = new BeginOperationDelegate(this.OnBeginGetAllCathedras);
            }
            if ((this.onEndGetAllCathedrasDelegate == null)) {
                this.onEndGetAllCathedrasDelegate = new EndOperationDelegate(this.OnEndGetAllCathedras);
            }
            if ((this.onGetAllCathedrasCompletedDelegate == null)) {
                this.onGetAllCathedrasCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCathedrasCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCathedrasDelegate, new object[] {
                        session}, this.onEndGetAllCathedrasDelegate, this.onGetAllCathedrasCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> GetCathedras(StudyingController.SCS.Session session, int facultyID) {
            return base.Channel.GetCathedras(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCathedras(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCathedras(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.CathedraDTO> EndGetCathedras(System.IAsyncResult result) {
            return base.Channel.EndGetCathedras(result);
        }
        
        private System.IAsyncResult OnBeginGetCathedras(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginGetCathedras(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndGetCathedras(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.CathedraDTO> retVal = this.EndGetCathedras(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCathedrasCompleted(object state) {
            if ((this.GetCathedrasCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCathedrasCompleted(this, new GetCathedrasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCathedrasAsync(StudyingController.SCS.Session session, int facultyID) {
            this.GetCathedrasAsync(session, facultyID, null);
        }
        
        public void GetCathedrasAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginGetCathedrasDelegate == null)) {
                this.onBeginGetCathedrasDelegate = new BeginOperationDelegate(this.OnBeginGetCathedras);
            }
            if ((this.onEndGetCathedrasDelegate == null)) {
                this.onEndGetCathedrasDelegate = new EndOperationDelegate(this.OnEndGetCathedras);
            }
            if ((this.onGetCathedrasCompletedDelegate == null)) {
                this.onGetCathedrasCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCathedrasCompleted);
            }
            base.InvokeAsync(this.onBeginGetCathedrasDelegate, new object[] {
                        session,
                        facultyID}, this.onEndGetCathedrasDelegate, this.onGetCathedrasCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetGroups(StudyingController.SCS.Session session, int cathedraID) {
            return base.Channel.GetGroups(session, cathedraID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroups(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroups(session, cathedraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetGroups(System.IAsyncResult result) {
            return base.Channel.EndGetGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int cathedraID = ((int)(inValues[1]));
            return this.BeginGetGroups(session, cathedraID, callback, asyncState);
        }
        
        private object[] OnEndGetGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.GroupDTO> retVal = this.EndGetGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupsCompleted(object state) {
            if ((this.GetGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupsCompleted(this, new GetGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupsAsync(StudyingController.SCS.Session session, int cathedraID) {
            this.GetGroupsAsync(session, cathedraID, null);
        }
        
        public void GetGroupsAsync(StudyingController.SCS.Session session, int cathedraID, object userState) {
            if ((this.onBeginGetGroupsDelegate == null)) {
                this.onBeginGetGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetGroups);
            }
            if ((this.onEndGetGroupsDelegate == null)) {
                this.onEndGetGroupsDelegate = new EndOperationDelegate(this.OnEndGetGroups);
            }
            if ((this.onGetGroupsCompletedDelegate == null)) {
                this.onGetGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupsDelegate, new object[] {
                        session,
                        cathedraID}, this.onEndGetGroupsDelegate, this.onGetGroupsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetAllGroups(StudyingController.SCS.Session session) {
            return base.Channel.GetAllGroups(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllGroups(StudyingController.SCS.Session session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllGroups(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetAllGroups(System.IAsyncResult result) {
            return base.Channel.EndGetAllGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetAllGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            return this.BeginGetAllGroups(session, callback, asyncState);
        }
        
        private object[] OnEndGetAllGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.GroupDTO> retVal = this.EndGetAllGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllGroupsCompleted(object state) {
            if ((this.GetAllGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllGroupsCompleted(this, new GetAllGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllGroupsAsync(StudyingController.SCS.Session session) {
            this.GetAllGroupsAsync(session, null);
        }
        
        public void GetAllGroupsAsync(StudyingController.SCS.Session session, object userState) {
            if ((this.onBeginGetAllGroupsDelegate == null)) {
                this.onBeginGetAllGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetAllGroups);
            }
            if ((this.onEndGetAllGroupsDelegate == null)) {
                this.onEndGetAllGroupsDelegate = new EndOperationDelegate(this.OnEndGetAllGroups);
            }
            if ((this.onGetAllGroupsCompletedDelegate == null)) {
                this.onGetAllGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllGroupsDelegate, new object[] {
                        session}, this.onEndGetAllGroupsDelegate, this.onGetAllGroupsCompletedDelegate, userState);
        }
        
        public void SaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute) {
            base.Channel.SaveInstitute(session, institute);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveInstitute(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveInstitute(session, institute, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveInstitute(System.IAsyncResult result) {
            base.Channel.EndSaveInstitute(result);
        }
        
        private System.IAsyncResult OnBeginSaveInstitute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.InstituteDTO institute = ((EntitiesDTO.InstituteDTO)(inValues[1]));
            return this.BeginSaveInstitute(session, institute, callback, asyncState);
        }
        
        private object[] OnEndSaveInstitute(System.IAsyncResult result) {
            this.EndSaveInstitute(result);
            return null;
        }
        
        private void OnSaveInstituteCompleted(object state) {
            if ((this.SaveInstituteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveInstituteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveInstituteAsync(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute) {
            this.SaveInstituteAsync(session, institute, null);
        }
        
        public void SaveInstituteAsync(StudyingController.SCS.Session session, EntitiesDTO.InstituteDTO institute, object userState) {
            if ((this.onBeginSaveInstituteDelegate == null)) {
                this.onBeginSaveInstituteDelegate = new BeginOperationDelegate(this.OnBeginSaveInstitute);
            }
            if ((this.onEndSaveInstituteDelegate == null)) {
                this.onEndSaveInstituteDelegate = new EndOperationDelegate(this.OnEndSaveInstitute);
            }
            if ((this.onSaveInstituteCompletedDelegate == null)) {
                this.onSaveInstituteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveInstituteCompleted);
            }
            base.InvokeAsync(this.onBeginSaveInstituteDelegate, new object[] {
                        session,
                        institute}, this.onEndSaveInstituteDelegate, this.onSaveInstituteCompletedDelegate, userState);
        }
        
        public void SaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty) {
            base.Channel.SaveFaculty(session, faculty);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveFaculty(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveFaculty(session, faculty, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveFaculty(System.IAsyncResult result) {
            base.Channel.EndSaveFaculty(result);
        }
        
        private System.IAsyncResult OnBeginSaveFaculty(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.FacultyDTO faculty = ((EntitiesDTO.FacultyDTO)(inValues[1]));
            return this.BeginSaveFaculty(session, faculty, callback, asyncState);
        }
        
        private object[] OnEndSaveFaculty(System.IAsyncResult result) {
            this.EndSaveFaculty(result);
            return null;
        }
        
        private void OnSaveFacultyCompleted(object state) {
            if ((this.SaveFacultyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveFacultyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveFacultyAsync(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty) {
            this.SaveFacultyAsync(session, faculty, null);
        }
        
        public void SaveFacultyAsync(StudyingController.SCS.Session session, EntitiesDTO.FacultyDTO faculty, object userState) {
            if ((this.onBeginSaveFacultyDelegate == null)) {
                this.onBeginSaveFacultyDelegate = new BeginOperationDelegate(this.OnBeginSaveFaculty);
            }
            if ((this.onEndSaveFacultyDelegate == null)) {
                this.onEndSaveFacultyDelegate = new EndOperationDelegate(this.OnEndSaveFaculty);
            }
            if ((this.onSaveFacultyCompletedDelegate == null)) {
                this.onSaveFacultyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveFacultyCompleted);
            }
            base.InvokeAsync(this.onBeginSaveFacultyDelegate, new object[] {
                        session,
                        faculty}, this.onEndSaveFacultyDelegate, this.onSaveFacultyCompletedDelegate, userState);
        }
        
        public void SaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra) {
            base.Channel.SaveCathedra(session, cathedra);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveCathedra(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCathedra(session, cathedra, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveCathedra(System.IAsyncResult result) {
            base.Channel.EndSaveCathedra(result);
        }
        
        private System.IAsyncResult OnBeginSaveCathedra(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.CathedraDTO cathedra = ((EntitiesDTO.CathedraDTO)(inValues[1]));
            return this.BeginSaveCathedra(session, cathedra, callback, asyncState);
        }
        
        private object[] OnEndSaveCathedra(System.IAsyncResult result) {
            this.EndSaveCathedra(result);
            return null;
        }
        
        private void OnSaveCathedraCompleted(object state) {
            if ((this.SaveCathedraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCathedraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCathedraAsync(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra) {
            this.SaveCathedraAsync(session, cathedra, null);
        }
        
        public void SaveCathedraAsync(StudyingController.SCS.Session session, EntitiesDTO.CathedraDTO cathedra, object userState) {
            if ((this.onBeginSaveCathedraDelegate == null)) {
                this.onBeginSaveCathedraDelegate = new BeginOperationDelegate(this.OnBeginSaveCathedra);
            }
            if ((this.onEndSaveCathedraDelegate == null)) {
                this.onEndSaveCathedraDelegate = new EndOperationDelegate(this.OnEndSaveCathedra);
            }
            if ((this.onSaveCathedraCompletedDelegate == null)) {
                this.onSaveCathedraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCathedraCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCathedraDelegate, new object[] {
                        session,
                        cathedra}, this.onEndSaveCathedraDelegate, this.onSaveCathedraCompletedDelegate, userState);
        }
        
        public void SaveGroup(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group) {
            base.Channel.SaveGroup(session, group);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveGroup(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveGroup(session, group, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveGroup(System.IAsyncResult result) {
            base.Channel.EndSaveGroup(result);
        }
        
        private System.IAsyncResult OnBeginSaveGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.GroupDTO group = ((EntitiesDTO.GroupDTO)(inValues[1]));
            return this.BeginSaveGroup(session, group, callback, asyncState);
        }
        
        private object[] OnEndSaveGroup(System.IAsyncResult result) {
            this.EndSaveGroup(result);
            return null;
        }
        
        private void OnSaveGroupCompleted(object state) {
            if ((this.SaveGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveGroupAsync(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group) {
            this.SaveGroupAsync(session, group, null);
        }
        
        public void SaveGroupAsync(StudyingController.SCS.Session session, EntitiesDTO.GroupDTO group, object userState) {
            if ((this.onBeginSaveGroupDelegate == null)) {
                this.onBeginSaveGroupDelegate = new BeginOperationDelegate(this.OnBeginSaveGroup);
            }
            if ((this.onEndSaveGroupDelegate == null)) {
                this.onEndSaveGroupDelegate = new EndOperationDelegate(this.OnEndSaveGroup);
            }
            if ((this.onSaveGroupCompletedDelegate == null)) {
                this.onSaveGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveGroupCompleted);
            }
            base.InvokeAsync(this.onBeginSaveGroupDelegate, new object[] {
                        session,
                        group}, this.onEndSaveGroupDelegate, this.onSaveGroupCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> GetUsers(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles) {
            return base.Channel.GetUsers(session, roles);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUsers(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(session, roles, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> EndGetUsers(System.IAsyncResult result) {
            return base.Channel.EndGetUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.UserRoles roles = ((EntitiesDTO.UserRoles)(inValues[1]));
            return this.BeginGetUsers(session, roles, callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.SystemUserDTO> retVal = this.EndGetUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles) {
            this.GetUsersAsync(session, roles, null);
        }
        
        public void GetUsersAsync(StudyingController.SCS.Session session, EntitiesDTO.UserRoles roles, object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, new object[] {
                        session,
                        roles}, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        public void SaveUser(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user) {
            base.Channel.SaveUser(session, user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveUser(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUser(session, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveUser(System.IAsyncResult result) {
            base.Channel.EndSaveUser(result);
        }
        
        private System.IAsyncResult OnBeginSaveUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.SystemUserDTO user = ((EntitiesDTO.SystemUserDTO)(inValues[1]));
            return this.BeginSaveUser(session, user, callback, asyncState);
        }
        
        private object[] OnEndSaveUser(System.IAsyncResult result) {
            this.EndSaveUser(result);
            return null;
        }
        
        private void OnSaveUserCompleted(object state) {
            if ((this.SaveUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUserAsync(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user) {
            this.SaveUserAsync(session, user, null);
        }
        
        public void SaveUserAsync(StudyingController.SCS.Session session, EntitiesDTO.SystemUserDTO user, object userState) {
            if ((this.onBeginSaveUserDelegate == null)) {
                this.onBeginSaveUserDelegate = new BeginOperationDelegate(this.OnBeginSaveUser);
            }
            if ((this.onEndSaveUserDelegate == null)) {
                this.onEndSaveUserDelegate = new EndOperationDelegate(this.OnEndSaveUser);
            }
            if ((this.onSaveUserCompletedDelegate == null)) {
                this.onSaveUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUserCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUserDelegate, new object[] {
                        session,
                        user}, this.onEndSaveUserDelegate, this.onSaveUserCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> GetSpecializations(StudyingController.SCS.Session session, int facultyID) {
            return base.Channel.GetSpecializations(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSpecializations(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpecializations(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> EndGetSpecializations(System.IAsyncResult result) {
            return base.Channel.EndGetSpecializations(result);
        }
        
        private System.IAsyncResult OnBeginGetSpecializations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginGetSpecializations(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndGetSpecializations(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.SpecializationDTO> retVal = this.EndGetSpecializations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpecializationsCompleted(object state) {
            if ((this.GetSpecializationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpecializationsCompleted(this, new GetSpecializationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpecializationsAsync(StudyingController.SCS.Session session, int facultyID) {
            this.GetSpecializationsAsync(session, facultyID, null);
        }
        
        public void GetSpecializationsAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginGetSpecializationsDelegate == null)) {
                this.onBeginGetSpecializationsDelegate = new BeginOperationDelegate(this.OnBeginGetSpecializations);
            }
            if ((this.onEndGetSpecializationsDelegate == null)) {
                this.onEndGetSpecializationsDelegate = new EndOperationDelegate(this.OnEndGetSpecializations);
            }
            if ((this.onGetSpecializationsCompletedDelegate == null)) {
                this.onGetSpecializationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpecializationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpecializationsDelegate, new object[] {
                        session,
                        facultyID}, this.onEndGetSpecializationsDelegate, this.onGetSpecializationsCompletedDelegate, userState);
        }
        
        public void DeleteInstitute(StudyingController.SCS.Session session, int instituteID) {
            base.Channel.DeleteInstitute(session, instituteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteInstitute(StudyingController.SCS.Session session, int instituteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteInstitute(session, instituteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteInstitute(System.IAsyncResult result) {
            base.Channel.EndDeleteInstitute(result);
        }
        
        private System.IAsyncResult OnBeginDeleteInstitute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int instituteID = ((int)(inValues[1]));
            return this.BeginDeleteInstitute(session, instituteID, callback, asyncState);
        }
        
        private object[] OnEndDeleteInstitute(System.IAsyncResult result) {
            this.EndDeleteInstitute(result);
            return null;
        }
        
        private void OnDeleteInstituteCompleted(object state) {
            if ((this.DeleteInstituteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteInstituteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteInstituteAsync(StudyingController.SCS.Session session, int instituteID) {
            this.DeleteInstituteAsync(session, instituteID, null);
        }
        
        public void DeleteInstituteAsync(StudyingController.SCS.Session session, int instituteID, object userState) {
            if ((this.onBeginDeleteInstituteDelegate == null)) {
                this.onBeginDeleteInstituteDelegate = new BeginOperationDelegate(this.OnBeginDeleteInstitute);
            }
            if ((this.onEndDeleteInstituteDelegate == null)) {
                this.onEndDeleteInstituteDelegate = new EndOperationDelegate(this.OnEndDeleteInstitute);
            }
            if ((this.onDeleteInstituteCompletedDelegate == null)) {
                this.onDeleteInstituteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteInstituteCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteInstituteDelegate, new object[] {
                        session,
                        instituteID}, this.onEndDeleteInstituteDelegate, this.onDeleteInstituteCompletedDelegate, userState);
        }
        
        public void DeleteFaculty(StudyingController.SCS.Session session, int facultyID) {
            base.Channel.DeleteFaculty(session, facultyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteFaculty(StudyingController.SCS.Session session, int facultyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFaculty(session, facultyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteFaculty(System.IAsyncResult result) {
            base.Channel.EndDeleteFaculty(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFaculty(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int facultyID = ((int)(inValues[1]));
            return this.BeginDeleteFaculty(session, facultyID, callback, asyncState);
        }
        
        private object[] OnEndDeleteFaculty(System.IAsyncResult result) {
            this.EndDeleteFaculty(result);
            return null;
        }
        
        private void OnDeleteFacultyCompleted(object state) {
            if ((this.DeleteFacultyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFacultyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFacultyAsync(StudyingController.SCS.Session session, int facultyID) {
            this.DeleteFacultyAsync(session, facultyID, null);
        }
        
        public void DeleteFacultyAsync(StudyingController.SCS.Session session, int facultyID, object userState) {
            if ((this.onBeginDeleteFacultyDelegate == null)) {
                this.onBeginDeleteFacultyDelegate = new BeginOperationDelegate(this.OnBeginDeleteFaculty);
            }
            if ((this.onEndDeleteFacultyDelegate == null)) {
                this.onEndDeleteFacultyDelegate = new EndOperationDelegate(this.OnEndDeleteFaculty);
            }
            if ((this.onDeleteFacultyCompletedDelegate == null)) {
                this.onDeleteFacultyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFacultyCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFacultyDelegate, new object[] {
                        session,
                        facultyID}, this.onEndDeleteFacultyDelegate, this.onDeleteFacultyCompletedDelegate, userState);
        }
        
        public void DeleteCathedra(StudyingController.SCS.Session session, int cathedraID) {
            base.Channel.DeleteCathedra(session, cathedraID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteCathedra(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCathedra(session, cathedraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteCathedra(System.IAsyncResult result) {
            base.Channel.EndDeleteCathedra(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCathedra(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int cathedraID = ((int)(inValues[1]));
            return this.BeginDeleteCathedra(session, cathedraID, callback, asyncState);
        }
        
        private object[] OnEndDeleteCathedra(System.IAsyncResult result) {
            this.EndDeleteCathedra(result);
            return null;
        }
        
        private void OnDeleteCathedraCompleted(object state) {
            if ((this.DeleteCathedraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCathedraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCathedraAsync(StudyingController.SCS.Session session, int cathedraID) {
            this.DeleteCathedraAsync(session, cathedraID, null);
        }
        
        public void DeleteCathedraAsync(StudyingController.SCS.Session session, int cathedraID, object userState) {
            if ((this.onBeginDeleteCathedraDelegate == null)) {
                this.onBeginDeleteCathedraDelegate = new BeginOperationDelegate(this.OnBeginDeleteCathedra);
            }
            if ((this.onEndDeleteCathedraDelegate == null)) {
                this.onEndDeleteCathedraDelegate = new EndOperationDelegate(this.OnEndDeleteCathedra);
            }
            if ((this.onDeleteCathedraCompletedDelegate == null)) {
                this.onDeleteCathedraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCathedraCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCathedraDelegate, new object[] {
                        session,
                        cathedraID}, this.onEndDeleteCathedraDelegate, this.onDeleteCathedraCompletedDelegate, userState);
        }
        
        public void DeleteGroup(StudyingController.SCS.Session session, int groupID) {
            base.Channel.DeleteGroup(session, groupID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteGroup(StudyingController.SCS.Session session, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteGroup(session, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteGroup(System.IAsyncResult result) {
            base.Channel.EndDeleteGroup(result);
        }
        
        private System.IAsyncResult OnBeginDeleteGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return this.BeginDeleteGroup(session, groupID, callback, asyncState);
        }
        
        private object[] OnEndDeleteGroup(System.IAsyncResult result) {
            this.EndDeleteGroup(result);
            return null;
        }
        
        private void OnDeleteGroupCompleted(object state) {
            if ((this.DeleteGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteGroupAsync(StudyingController.SCS.Session session, int groupID) {
            this.DeleteGroupAsync(session, groupID, null);
        }
        
        public void DeleteGroupAsync(StudyingController.SCS.Session session, int groupID, object userState) {
            if ((this.onBeginDeleteGroupDelegate == null)) {
                this.onBeginDeleteGroupDelegate = new BeginOperationDelegate(this.OnBeginDeleteGroup);
            }
            if ((this.onEndDeleteGroupDelegate == null)) {
                this.onEndDeleteGroupDelegate = new EndOperationDelegate(this.OnEndDeleteGroup);
            }
            if ((this.onDeleteGroupCompletedDelegate == null)) {
                this.onDeleteGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteGroupCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteGroupDelegate, new object[] {
                        session,
                        groupID}, this.onEndDeleteGroupDelegate, this.onDeleteGroupCompletedDelegate, userState);
        }
        
        public void DeleteUser(StudyingController.SCS.Session session, int userID) {
            base.Channel.DeleteUser(session, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteUser(StudyingController.SCS.Session session, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(session, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteUser(System.IAsyncResult result) {
            base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginDeleteUser(session, userID, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            this.EndDeleteUser(result);
            return null;
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(StudyingController.SCS.Session session, int userID) {
            this.DeleteUserAsync(session, userID, null);
        }
        
        public void DeleteUserAsync(StudyingController.SCS.Session session, int userID, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        session,
                        userID}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        public EntitiesDTO.GroupDTO GetGroupByID(StudyingController.SCS.Session session, System.Nullable<int> groupID) {
            return base.Channel.GetGroupByID(session, groupID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupByID(StudyingController.SCS.Session session, System.Nullable<int> groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupByID(session, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EntitiesDTO.GroupDTO EndGetGroupByID(System.IAsyncResult result) {
            return base.Channel.EndGetGroupByID(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            System.Nullable<int> groupID = ((System.Nullable<int>)(inValues[1]));
            return this.BeginGetGroupByID(session, groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupByID(System.IAsyncResult result) {
            EntitiesDTO.GroupDTO retVal = this.EndGetGroupByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupByIDCompleted(object state) {
            if ((this.GetGroupByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupByIDCompleted(this, new GetGroupByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> groupID) {
            this.GetGroupByIDAsync(session, groupID, null);
        }
        
        public void GetGroupByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> groupID, object userState) {
            if ((this.onBeginGetGroupByIDDelegate == null)) {
                this.onBeginGetGroupByIDDelegate = new BeginOperationDelegate(this.OnBeginGetGroupByID);
            }
            if ((this.onEndGetGroupByIDDelegate == null)) {
                this.onEndGetGroupByIDDelegate = new EndOperationDelegate(this.OnEndGetGroupByID);
            }
            if ((this.onGetGroupByIDCompletedDelegate == null)) {
                this.onGetGroupByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupByIDDelegate, new object[] {
                        session,
                        groupID}, this.onEndGetGroupByIDDelegate, this.onGetGroupByIDCompletedDelegate, userState);
        }
        
        public EntitiesDTO.SpecializationDTO GetSpecializationByID(StudyingController.SCS.Session session, System.Nullable<int> specializationID) {
            return base.Channel.GetSpecializationByID(session, specializationID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSpecializationByID(StudyingController.SCS.Session session, System.Nullable<int> specializationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpecializationByID(session, specializationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EntitiesDTO.SpecializationDTO EndGetSpecializationByID(System.IAsyncResult result) {
            return base.Channel.EndGetSpecializationByID(result);
        }
        
        private System.IAsyncResult OnBeginGetSpecializationByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            System.Nullable<int> specializationID = ((System.Nullable<int>)(inValues[1]));
            return this.BeginGetSpecializationByID(session, specializationID, callback, asyncState);
        }
        
        private object[] OnEndGetSpecializationByID(System.IAsyncResult result) {
            EntitiesDTO.SpecializationDTO retVal = this.EndGetSpecializationByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpecializationByIDCompleted(object state) {
            if ((this.GetSpecializationByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpecializationByIDCompleted(this, new GetSpecializationByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpecializationByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> specializationID) {
            this.GetSpecializationByIDAsync(session, specializationID, null);
        }
        
        public void GetSpecializationByIDAsync(StudyingController.SCS.Session session, System.Nullable<int> specializationID, object userState) {
            if ((this.onBeginGetSpecializationByIDDelegate == null)) {
                this.onBeginGetSpecializationByIDDelegate = new BeginOperationDelegate(this.OnBeginGetSpecializationByID);
            }
            if ((this.onEndGetSpecializationByIDDelegate == null)) {
                this.onEndGetSpecializationByIDDelegate = new EndOperationDelegate(this.OnEndGetSpecializationByID);
            }
            if ((this.onGetSpecializationByIDCompletedDelegate == null)) {
                this.onGetSpecializationByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpecializationByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpecializationByIDDelegate, new object[] {
                        session,
                        specializationID}, this.onEndGetSpecializationByIDDelegate, this.onGetSpecializationByIDCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> GetLectures(StudyingController.SCS.Session session, int teacherID) {
            return base.Channel.GetLectures(session, teacherID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLectures(StudyingController.SCS.Session session, int teacherID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLectures(session, teacherID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.LectureDTO> EndGetLectures(System.IAsyncResult result) {
            return base.Channel.EndGetLectures(result);
        }
        
        private System.IAsyncResult OnBeginGetLectures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int teacherID = ((int)(inValues[1]));
            return this.BeginGetLectures(session, teacherID, callback, asyncState);
        }
        
        private object[] OnEndGetLectures(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.LectureDTO> retVal = this.EndGetLectures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLecturesCompleted(object state) {
            if ((this.GetLecturesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLecturesCompleted(this, new GetLecturesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLecturesAsync(StudyingController.SCS.Session session, int teacherID) {
            this.GetLecturesAsync(session, teacherID, null);
        }
        
        public void GetLecturesAsync(StudyingController.SCS.Session session, int teacherID, object userState) {
            if ((this.onBeginGetLecturesDelegate == null)) {
                this.onBeginGetLecturesDelegate = new BeginOperationDelegate(this.OnBeginGetLectures);
            }
            if ((this.onEndGetLecturesDelegate == null)) {
                this.onEndGetLecturesDelegate = new EndOperationDelegate(this.OnEndGetLectures);
            }
            if ((this.onGetLecturesCompletedDelegate == null)) {
                this.onGetLecturesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLecturesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLecturesDelegate, new object[] {
                        session,
                        teacherID}, this.onEndGetLecturesDelegate, this.onGetLecturesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> GetLectureGroups(StudyingController.SCS.Session session, int lectureID) {
            return base.Channel.GetLectureGroups(session, lectureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLectureGroups(StudyingController.SCS.Session session, int lectureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLectureGroups(session, lectureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.GroupDTO> EndGetLectureGroups(System.IAsyncResult result) {
            return base.Channel.EndGetLectureGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetLectureGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int lectureID = ((int)(inValues[1]));
            return this.BeginGetLectureGroups(session, lectureID, callback, asyncState);
        }
        
        private object[] OnEndGetLectureGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.GroupDTO> retVal = this.EndGetLectureGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLectureGroupsCompleted(object state) {
            if ((this.GetLectureGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLectureGroupsCompleted(this, new GetLectureGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLectureGroupsAsync(StudyingController.SCS.Session session, int lectureID) {
            this.GetLectureGroupsAsync(session, lectureID, null);
        }
        
        public void GetLectureGroupsAsync(StudyingController.SCS.Session session, int lectureID, object userState) {
            if ((this.onBeginGetLectureGroupsDelegate == null)) {
                this.onBeginGetLectureGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetLectureGroups);
            }
            if ((this.onEndGetLectureGroupsDelegate == null)) {
                this.onEndGetLectureGroupsDelegate = new EndOperationDelegate(this.OnEndGetLectureGroups);
            }
            if ((this.onGetLectureGroupsCompletedDelegate == null)) {
                this.onGetLectureGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLectureGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLectureGroupsDelegate, new object[] {
                        session,
                        lectureID}, this.onEndGetLectureGroupsDelegate, this.onGetLectureGroupsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.TeacherDTO> GetTeachers(StudyingController.SCS.Session session, int cathedraID) {
            return base.Channel.GetTeachers(session, cathedraID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTeachers(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTeachers(session, cathedraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.TeacherDTO> EndGetTeachers(System.IAsyncResult result) {
            return base.Channel.EndGetTeachers(result);
        }
        
        private System.IAsyncResult OnBeginGetTeachers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int cathedraID = ((int)(inValues[1]));
            return this.BeginGetTeachers(session, cathedraID, callback, asyncState);
        }
        
        private object[] OnEndGetTeachers(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.TeacherDTO> retVal = this.EndGetTeachers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTeachersCompleted(object state) {
            if ((this.GetTeachersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTeachersCompleted(this, new GetTeachersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTeachersAsync(StudyingController.SCS.Session session, int cathedraID) {
            this.GetTeachersAsync(session, cathedraID, null);
        }
        
        public void GetTeachersAsync(StudyingController.SCS.Session session, int cathedraID, object userState) {
            if ((this.onBeginGetTeachersDelegate == null)) {
                this.onBeginGetTeachersDelegate = new BeginOperationDelegate(this.OnBeginGetTeachers);
            }
            if ((this.onEndGetTeachersDelegate == null)) {
                this.onEndGetTeachersDelegate = new EndOperationDelegate(this.OnEndGetTeachers);
            }
            if ((this.onGetTeachersCompletedDelegate == null)) {
                this.onGetTeachersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTeachersCompleted);
            }
            base.InvokeAsync(this.onBeginGetTeachersDelegate, new object[] {
                        session,
                        cathedraID}, this.onEndGetTeachersDelegate, this.onGetTeachersCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EntitiesDTO.SubjectDTO> GetSubjects(StudyingController.SCS.Session session, int cathedraID) {
            return base.Channel.GetSubjects(session, cathedraID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSubjects(StudyingController.SCS.Session session, int cathedraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSubjects(session, cathedraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EntitiesDTO.SubjectDTO> EndGetSubjects(System.IAsyncResult result) {
            return base.Channel.EndGetSubjects(result);
        }
        
        private System.IAsyncResult OnBeginGetSubjects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int cathedraID = ((int)(inValues[1]));
            return this.BeginGetSubjects(session, cathedraID, callback, asyncState);
        }
        
        private object[] OnEndGetSubjects(System.IAsyncResult result) {
            System.Collections.Generic.List<EntitiesDTO.SubjectDTO> retVal = this.EndGetSubjects(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSubjectsCompleted(object state) {
            if ((this.GetSubjectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSubjectsCompleted(this, new GetSubjectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSubjectsAsync(StudyingController.SCS.Session session, int cathedraID) {
            this.GetSubjectsAsync(session, cathedraID, null);
        }
        
        public void GetSubjectsAsync(StudyingController.SCS.Session session, int cathedraID, object userState) {
            if ((this.onBeginGetSubjectsDelegate == null)) {
                this.onBeginGetSubjectsDelegate = new BeginOperationDelegate(this.OnBeginGetSubjects);
            }
            if ((this.onEndGetSubjectsDelegate == null)) {
                this.onEndGetSubjectsDelegate = new EndOperationDelegate(this.OnEndGetSubjects);
            }
            if ((this.onGetSubjectsCompletedDelegate == null)) {
                this.onGetSubjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSubjectsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSubjectsDelegate, new object[] {
                        session,
                        cathedraID}, this.onEndGetSubjectsDelegate, this.onGetSubjectsCompletedDelegate, userState);
        }
        
        public void SaveLecture(StudyingController.SCS.Session session, EntitiesDTO.LectureDTO lecture) {
            base.Channel.SaveLecture(session, lecture);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveLecture(StudyingController.SCS.Session session, EntitiesDTO.LectureDTO lecture, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveLecture(session, lecture, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveLecture(System.IAsyncResult result) {
            base.Channel.EndSaveLecture(result);
        }
        
        private System.IAsyncResult OnBeginSaveLecture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            EntitiesDTO.LectureDTO lecture = ((EntitiesDTO.LectureDTO)(inValues[1]));
            return this.BeginSaveLecture(session, lecture, callback, asyncState);
        }
        
        private object[] OnEndSaveLecture(System.IAsyncResult result) {
            this.EndSaveLecture(result);
            return null;
        }
        
        private void OnSaveLectureCompleted(object state) {
            if ((this.SaveLectureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveLectureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveLectureAsync(StudyingController.SCS.Session session, EntitiesDTO.LectureDTO lecture) {
            this.SaveLectureAsync(session, lecture, null);
        }
        
        public void SaveLectureAsync(StudyingController.SCS.Session session, EntitiesDTO.LectureDTO lecture, object userState) {
            if ((this.onBeginSaveLectureDelegate == null)) {
                this.onBeginSaveLectureDelegate = new BeginOperationDelegate(this.OnBeginSaveLecture);
            }
            if ((this.onEndSaveLectureDelegate == null)) {
                this.onEndSaveLectureDelegate = new EndOperationDelegate(this.OnEndSaveLecture);
            }
            if ((this.onSaveLectureCompletedDelegate == null)) {
                this.onSaveLectureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveLectureCompleted);
            }
            base.InvokeAsync(this.onBeginSaveLectureDelegate, new object[] {
                        session,
                        lecture}, this.onEndSaveLectureDelegate, this.onSaveLectureCompletedDelegate, userState);
        }
        
        public void SaveTeacherSubjects(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects) {
            base.Channel.SaveTeacherSubjects(session, teacherID, subjects);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveTeacherSubjects(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveTeacherSubjects(session, teacherID, subjects, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveTeacherSubjects(System.IAsyncResult result) {
            base.Channel.EndSaveTeacherSubjects(result);
        }
        
        private System.IAsyncResult OnBeginSaveTeacherSubjects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            StudyingController.SCS.Session session = ((StudyingController.SCS.Session)(inValues[0]));
            int teacherID = ((int)(inValues[1]));
            System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects = ((System.Collections.Generic.List<EntitiesDTO.SubjectDTO>)(inValues[2]));
            return this.BeginSaveTeacherSubjects(session, teacherID, subjects, callback, asyncState);
        }
        
        private object[] OnEndSaveTeacherSubjects(System.IAsyncResult result) {
            this.EndSaveTeacherSubjects(result);
            return null;
        }
        
        private void OnSaveTeacherSubjectsCompleted(object state) {
            if ((this.SaveTeacherSubjectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveTeacherSubjectsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveTeacherSubjectsAsync(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects) {
            this.SaveTeacherSubjectsAsync(session, teacherID, subjects, null);
        }
        
        public void SaveTeacherSubjectsAsync(StudyingController.SCS.Session session, int teacherID, System.Collections.Generic.List<EntitiesDTO.SubjectDTO> subjects, object userState) {
            if ((this.onBeginSaveTeacherSubjectsDelegate == null)) {
                this.onBeginSaveTeacherSubjectsDelegate = new BeginOperationDelegate(this.OnBeginSaveTeacherSubjects);
            }
            if ((this.onEndSaveTeacherSubjectsDelegate == null)) {
                this.onEndSaveTeacherSubjectsDelegate = new EndOperationDelegate(this.OnEndSaveTeacherSubjects);
            }
            if ((this.onSaveTeacherSubjectsCompletedDelegate == null)) {
                this.onSaveTeacherSubjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveTeacherSubjectsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveTeacherSubjectsDelegate, new object[] {
                        session,
                        teacherID,
                        subjects}, this.onEndSaveTeacherSubjectsDelegate, this.onSaveTeacherSubjectsCompletedDelegate, userState);
        }
    }
}
