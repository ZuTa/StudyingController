//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Splitter.SS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/SplitterService")]
    [System.SerializableAttribute()]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ModelDTO.SystemUserDTO UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ModelDTO.SystemUserDTO User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SplitterServiceException", Namespace="http://schemas.datacontract.org/2004/07/SplitterService")]
    [System.SerializableAttribute()]
    public partial class SplitterServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SS.ISplitterService")]
    public interface ISplitterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISplitterService/Login", ReplyAction="http://tempuri.org/ISplitterService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Splitter.SS.SplitterServiceException), Action="http://tempuri.org/ISplitterService/LoginSplitterServiceExceptionFault", Name="SplitterServiceException", Namespace="http://schemas.datacontract.org/2004/07/SplitterService")]
        Splitter.SS.Session Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISplitterService/CanRegister", ReplyAction="http://tempuri.org/ISplitterService/CanRegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Splitter.SS.SplitterServiceException), Action="http://tempuri.org/ISplitterService/CanRegisterSplitterServiceExceptionFault", Name="SplitterServiceException", Namespace="http://schemas.datacontract.org/2004/07/SplitterService")]
        bool CanRegister(ModelDTO.SystemUserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISplitterService/Register", ReplyAction="http://tempuri.org/ISplitterService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Splitter.SS.SplitterServiceException), Action="http://tempuri.org/ISplitterService/RegisterSplitterServiceExceptionFault", Name="SplitterServiceException", Namespace="http://schemas.datacontract.org/2004/07/SplitterService")]
        void Register(ModelDTO.SystemUserDTO user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISplitterServiceChannel : Splitter.SS.ISplitterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitterServiceClient : System.ServiceModel.ClientBase<Splitter.SS.ISplitterService>, Splitter.SS.ISplitterService {
        
        public SplitterServiceClient() {
        }
        
        public SplitterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SplitterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SplitterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SplitterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Splitter.SS.Session Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        public bool CanRegister(ModelDTO.SystemUserDTO user) {
            return base.Channel.CanRegister(user);
        }
        
        public void Register(ModelDTO.SystemUserDTO user) {
            base.Channel.Register(user);
        }
    }
}
